***************************************************
* set the trap vector at address $fff0 to TRAPMON *
*                                                 *
* DIV0  FDB   TRAPMON                             *
*                                                 *
* This vector is used for division by zero        *
* or in the case of an illegal instruction (6309) *
* So the easiest way to call the monitor is an    *
* illegal instruction, e.g. $15                   *
***************************************************


****************************************
* register position on stack after IRQ *
****************************************

*********
* Stack *
*-------*
* c: PC *
* b:    *
* a: U  *
* 9:    *
* 8: Y  *
* 7:    *
* 6: X  *
* 5: DP *
* 4: F  *
* 3: E  *
* 2: B  *
* 1: A  *
* 0: CC *
*********

*******
TRAPMON
*******

        ANDCC   #%1010 1111   ; enable FIRQ & IRQ
        LDA     #BIOS_DP      ; BIOS direct page
        TFR     A,DP          ; set DP
        SETDP   BIOS_DP       ; inform assembler
        JMP     Monitor

*****************************************
* Machine Language Monitor for 6309 CPU *
*****************************************

Msg_MonHello
        FCB     "Bit Shifter's M/L Monitor\n\0"
Msg_Mon FCB     "  PC  DP CC  A B  E F    X    Y    U    S    V"
        FCB     " EFHINZVC\n;\0"

************
Mon_Commands
************

        FCB     '$',Mon_Toggle_Dollar
        FCB     ':',Mon_Modify_Memory
        FCB     ';',Mon_Modify_Register
        FCB     'E',Mon_Execute
        FCB     'G',Mon_Go
        FCB     'L',Mon_Load
        FCB     'M',Mon_Show_Memory
        FCB     'R',Mon_Show_Register
        FCB     'T',Mon_Time
        FCB     'U',Mon_Unassemble
        FCB     'X',Mon_Exit
        FCB     0


*****************
Mon_Toggle_Dollar
*****************

        EIM     #1,Mon_Dollar
        RTS

******************************
* Execute a subroutine       *
* Read a hex address and JSR *
******************************

***********
Mon_Execute
***********

        LDW     #Mon_Hello      ; preset
        JSR     Mon_Get_Word
        JSR     ,W
        BRA     Mon_Hello

******
Mon_Go
******

        LDX     #BUF_TXT+2
        LDW     MON_PC          ; preset
        JSR     Mon_Get_Word
        LDS     MON_S           ; S
        LEAS    -14,S           ; trap offset
        STW     10+2,S          ; PC
        LDA     MON_CC
        STA     ,S              ; CC
        LDQ     MON_A           ; A,B,E,F
        STQ     1,S             ; D
        LDA     MON_DP
        STA     3+2,S           ; DP
        LDQ     MON_X
        STQ     4+2,S           ; X,Y
        LDD     MON_U
        STD     8+2,S           ; U
        LDD     MON_V           ; V
        TFR     D,V
        RTI

*******
Monitor
*******

        LDD     10+2,S          ; PC
        STD     MON_PC
        LDD     1,S             ; D
        STQ     MON_A           ; A,B,E,F
        LDQ     4+2,S           ; X,Y
        STQ     MON_X
        LDD     8+2,S           ; U
        STD     MON_U
        TFR     S,D
        ADDD    #14             ; trap offset
        STD     MON_S           ; S
        TFR     V,D
        STD     MON_V
        LDA     3+2,S           ; DP
        LDB     ,S              ; CC
        STD     MON_DP

*********
Mon_Hello
*********

        LDX     #Msg_MonHello
        JSR     [VECTBL+PUTS*2]
        JSR     Mon_Show_Register

*********
Main_Loop
*********

        PSHS    DP
        TFR     B,DP            ; BASIC DP
        JSR     Edit_Get_Line
        JSR     Mon_CRLF
        PULS    DP

        LDX     #Mon_Commands
        LDA     BUF_TXT+1       ; command
        CMPA    #'a'
        BLO     Moni_20
        ANDA    #%1101 1111     ; force upper case

Moni_20 LDB     ,X+             ; command char
        BEQ     Moni_30         ; not in list
        LDU     ,X++            ; command subroutine
        CMPR    A,B
        BNE     Moni_20         ; next
        LDX     #BUF_TXT+2
        JSR     ,U
        BRA     Main_Loop

Mon_Syntax_Error
Moni_30 JSR     Mon_CRLF
        LDA     #'?'
        CALL    PUTC
        LDA     #BS
        CALL    PUTC
        BRA     Main_Loop


***************
Mon_Show_Memory
***************

***************************************
* Dump a memory range to screen       *
* Read two hex words for start and    *
* stop :XXXX WWWW                     *
* ----------------------------------- *
* Input : X = pointer to input buffer *
*         MON_MEM = default start     *
* Output: X = advanced                *
*         MON_MEM = end address + 1   *
*         D,W modified                *
***************************************

        LDW     MON_MEM         ; preset
        JSR     Mon_Get_Word
        PSHSW                   ; push start
        ADDW    #127            ; preset
        JSR     Mon_Get_Word
        PULS    X               ; X = start address
        TFR     W,Y             ; Y = last  address
MoSM_10 JSR     Mon_Dump_Row
                                ; TODO: check STOP key
        CMPR    X,Y
        BHS     MoSM_10
MoSM_20 STX     MON_MEM         ; remember last used
        RTS

*****************
Mon_Modify_Memory
*****************

        BSR     Mon_Get_Word
        TFR     W,Y             ; Y = start address
        LDB     #16
MoMM_10 LBSR    Mon_Get_Byte
        STA     ,Y+
        DECB
        BNE     MoMM_10
        RTS

*******************
Mon_Modify_Register
*******************

        LDY     #MONBUF
MoMR_10 BSR     Mon_Get_Byte
        STA     ,Y+
        CMPY    #MONBUF+18
        BLO     MoMR_10
        RTS

*****************
Mon_Show_Register
*****************

        LDX     #Msg_Mon
        JSR     [VECTBL+PUTS*2]

        LDX     #MONBUF
        LDD     ,X++            ; PC
        JSR     Mon_Show_Word
        LDA     ,X+             ; DP
        BSR     Mon_Show_Blank_Byte
        LDA     ,X+             ; CC
        BSR     Mon_Show_Blank_Byte
MoSR_10 JSR     Mon_Blank
        LDD     ,X++            ; D W X Y U S V
        JSR     Mon_Show_Word
        CMPX    #MONBUF+18
        BLO     MoSR_10
        JSR     Mon_Blank
        LDA     MON_CC
        STA     MON_TMP
        LDB     #8
MoSR_20 LDA     #'0'
        ROL     MON_TMP
        ADCA    #0
        JSR     [VECTBL+PUTC*2]
        DECB
        BNE     MoSR_20
        JMP     Mon_CRLF

*******************
Mon_Show_Blank_Byte
*******************

        PSHS    A
        JSR     Mon_Blank
        PULS    A
        JMP     Mon_Show_Byte

********
Mon_Exit
********

        JMP     DIE

************
Mon_Get_Word
************

*****************************************
* Convert four hex digits to word value *
* skipping an optional leading blank    *
* ------------------------------------- *
* Input : X = pointer to input buffer   *
*       : W = default result            *
* Output: W = word value                *
*       : X = advanced after hex word   *
*****************************************

        LDA     ,X              ; next char
        CMPA    #' '            ; leading blank ?
        BLO     MoGW_Ret        ; -> error
        BEQ     MoGW_10         ; -> skip
        CMPA    #','            ; comma separator ?
        BEQ     MoGW_10         ; -> yes
        CMPA    #'-'            ; dash separator ?
        BNE     MoGW_20         ; -> no
MoGW_10 LEAX    1,X             ; skip 1 char
MoGW_20 BSR     Mon_Get_Byte    ; 2 hex to byte
        TFR     A,E             ; high byte
        BSR     Mon_Get_Byte    ; 2 hex to byte
        TFR     A,F             ; low   byte
MoGW_Ret RTS

************
Mon_Get_Byte
************

****************************************
* Convert two hex digits to byte value *
* skipping leading blanks              *
* ------------------------------------ *
* Input :  X = pointer to input buffer *
* Output:  A = byte value              *
*          X = advanced after hex byte *
****************************************

        PSHS    B               ; save B
MoGB_05 LDB     ,X              ; next char
        CMPB    #' '            ; leading blank ?
        BNE     MoGB_10         ; -> no
        LEAX    1,X             ; skip blank
        BRA     MoGB_05
MoGB_10 BSR     Mon_Get_Nibble  ; get high nibble
        TFR     B,A             ; store in A
        LSLA                    ; shift to high
        LSLA
        LSLA
        LSLA
        BSR     Mon_Get_Nibble  ; get low nibble
        ORR     B,A             ; combine nibbles -> A
        PULS    PC,B

**************
Mon_Get_Nibble
**************

*****************************************
* Get a hex digit from buffer pointer X *
* convert it to binary  and return in A *
* ------------------------------------- *
* Input : X = pointer to next hex digit *
* Output: B = nibble value              *
*         X++                           *
*****************************************

        LDB     ,X+             ; get hex digit
        CMPB    #'9'+1          ; numeric ?
        BLO     MGB_10          ; -> yes
        SUBB    #7              ; assume A -> F
MGB_10  ANDB    #15             ; to binary
        RTS

************
Mon_Dump_Row
************

*****************************************************
* Print a row of 16 bytes as hexdump and ASCII dump *
* ------------------------------------------------- *
* Input : X = start address                         *
* Output: X += 16                                   *
*         A,B,E modified                            *
*****************************************************

        LDA     #':'            ; modify memory symbol
        CALL    PUTC
        TFR     X,D
        BSR     Mon_Show_Word   ; print start address
        CLRE                    ; index
MDR_10  BSR     Mon_Blank
        LDA     E,X             ; next byte
        BSR     Mon_Show_Byte
        CMPE    #7
        BNE     MDR_20
        BSR     Mon_Blank       ; insert blank after 8
MDR_20  INCE
        CMPE    #16
        BNE     MDR_10
        BSR     Mon_Blank       ; E = 16
MDR_30  LDA     ,X+
        CMPA    #$7E
        BHI     MDR_40
        CMPA    #' '            ; printable ?
        BHS     MDR_50
MDR_40  LDA     #'.'
MDR_50  CALL    PUTC
        CMPE    #9
        BNE     MDR_60
        BSR     Mon_Blank
MDR_60  DECE
        BNE     MDR_30          ; fall through at end
        SIZE

********
Mon_CRLF
********

        LDA     #LF
        CALL    PUTC
        RTS

*********
Mon_Blank
*********

        LDA     #' '
        CALL    PUTC
        RTS

*********
Mon_Minus
*********

        LDA     #'-'
        CALL    PUTC
        RTS


*********
Mon_Colon
*********

        LDA     #':'
        CALL    PUTC
        RTS


*************
Mon_Show_Word
*************

******************************
* Print D as four hex digits *
* -------------------------- *
* Input : D = value          *
* Output: A = low byte hex   *
*         B = #PUTC          *
******************************

        PSHS    B               ; push  low byte
        BSR     Mon_Show_Byte   ; print high byte
        PULS    A               ; pull  low  byte
                                ; fall  through

*************
Mon_Show_Byte
*************

*****************************
* Print A as two hex digits *
* ------------------------- *
* Input : A = value         *
* Output: A = low byte hex  *
*         B = #PUTC         *
*****************************

        PSHS    A
        LSRA
        LSRA
        LSRA
        LSRA
        BSR     Mon_Nib_Hex
        PULS    A               ; fall through
        SIZE

***********
Mon_Nib_Hex
***********

************************************
* Print lower nibble of value in A *
* -------------------------------- *
* Input : A = binary number        *
* Output: A = hex digit (0 - F)    *
*         B = #PUTC                *
************************************

        ANDA    #15
        CMPA    #10
        BLO     MoNH_10
        ADDA    #7
MoNH_10 ADDA    #'0'
        CALL    PUTC
        RTS


*********
Mon_Getch
*********

****************************
* Wait for character input *
* Convert CR to LF         *
* Ignore incoming LF       *
* ------------------------ *
* Output: A = character    *
****************************

        CALL    GETC
        TSTB
        BEQ     Mon_Getch

        TST     BIOS_EMU_Flag
        BNE     MGC_80          ; -> emu active

        CMPA    #CR             ; convert CR --> LF
        BNE     MGC_10
        LDA     #LF
        BRA     MGC_80
MGC_10  CMPA    #LF             ; ignore incoming LF
        BEQ     Mon_Getch
MGC_80  JMP     Mon_CheckAbort


**************
Mon_CheckAbort
**************

*******************************************
* Check A register for Ctrl-C and Escape, *
* return to caller's caller on match      *
*******************************************

        CMPA    #ETX            ; Ctrl-C aborts
        BEQ     MCA_90
        CMPA    #ESC            ; Escape too
        BEQ     MCA_90
        RTS                     ; don't abort, just return
MCA_90  PULS    D               ; drop check routine return address
        LDX     #Msg_Aborted
        CALL    PUTS
        RTS                     ; return to whatever called load routine


********
Mon_Load
********

**********************************************************************
* Load S-Record aka S19 file from virtual USB serial port            *
* If a start address / program entry is given, start execution there *
**********************************************************************

        LDX     #Msg_LoadSRec   ; Load message
        CALL    PUTS
        CLRD                    ; init
        STA     Mon_Received_S5 ; flag: S5 record counter received
        STD     Mon_Records     ; record counter
        STA     Mon_Received_S9 ; flag: S9 program entry received
        STD     Mon_Entry

; main loop entry:

ML_10   JSR     Mon_Getch       ; read next character of S-Record
        CMPA    #CR
        BEQ     ML_10           ; ignore CR
        CMPA    #LF             ; LF here indicates empty line,
        BNE     ML_20           ; which means end of transmission
        RTS                     ; LF -> we're done
ML_20   CMPA    #'S'            ; lines with content must start with 'S'
        LBNE    ML_90           ; this line doesn't
        JSR     Mon_Getch       ; read next character
        CMPA    #'0'
        LBEQ     Mon_Load_S0    ; -> S0 record
        CMPA    #'1'
        LBEQ     Mon_Load_S1    ; -> S1 record
        CMPA    #'5'
        LBEQ     Mon_Load_S5    ; -> S5 record
        CMPA    #'9'
        LBEQ     Mon_Load_S9    ; -> S9 record
ML_90   LDX     #Msg_Bad_SRec   ; Output error message
        CALL    PUTS            ; and abort
        RTS


****************
Mon_ReadSRecords
****************

***************************************************
* Read all S record fields into BUF_TXT,          *
* abort on invalid characters and buffer overflow *
* ----------------------------------------------- *
* Output: X = BUF_TXT                             *
*         Y = pointer to terminating '\0'         *
***************************************************

        LDX     #BUF_TXT
RSR_10  JSR     Mon_Getch
        CMPA    #CR             ; Ignore CR
        BEQ     RSR_10
        CMPA    #LF             ; LF -> end of line
        BEQ     RSR_80
RSR_20  CMPA    #'0'
        LBLO    ML_90           ; abort on forbidden characters < '0'
        CMPA    #'F'
        LBHI    ML_90           ; abort on forbidden characters > 'F'
        CMPA    #'9'
        BLS     RSR_30           ; character is digit, accept it
        CMPA    #'A'
        LBLO    ML_90           ; not a letter, abort
RSR_30  STA     ,X+             ; store character, fetch next
        CMPX    BUF_TXT_BYND    ; buffer full?
        BNE     RSR_10
        LDX     #Msg_LineTooLong
        CALL    PUTS
        RTS
RSR_80  CLRA                    ; zero-terminate line
        STA     ,X
        TFR     X,Y
        LDX     #BUF_TXT
        RTS                     ; and return


**************
Mon_ReadHeader
**************

        PSHS    X,Y
        JSR     Mon_Get_Byte    ; Compare S1 byte count against actual number
        STA     Mon_ByteCount   ; of bytes provided by this S-record
        PULS    X,Y
        SUBR    X,Y
        LEAY    -2,Y            ; length bytes don't count
        TFR     Y,D
        ASRD                    ; divide by two, two characters per byte
        STB     Mon_CRC         ; init CRC
        CMPB    Mon_ByteCount
        LBNE    ML_90           ; mismatch, output error message
        SUBB    #3              ; two address bytes and one checksum byte
        STB     Mon_ByteCount   ; don't count in in the number of data bytes
        LDX     #BUF_TXT+2      ; point to start address of payload
        JSR     Mon_Get_Byte    ; MSB of start address
        LDB     Mon_CRC
        ADDR    A,B
        STB     Mon_CRC
        TFR     A,E
        JSR     Mon_Get_Byte    ; LSB of start address
        LDB     Mon_CRC
        ADDR    A,B
        STB     Mon_CRC
        TFR     A,F
        TFR     W,Y             ; Y is now our storage pointer
        RTS


***********
Mon_Load_S0
***********

        JSR     Mon_Getch       ; Ignore file header information
        CMPA    #LF
        BNE     Mon_Load_S0
        JMP     ML_10


***********
Mon_Load_S1
***********

        JSR     Mon_ReadSRecords; Load and store data
        JSR     Mon_ReadHeader
MLS1_10 JSR     Mon_Get_Byte    ; get data byte
        LDB     Mon_CRC
        ADDR    A,B
        STB     Mon_CRC
        STA     ,Y+             ; store byte and increment pointer
        DEC     Mon_ByteCount
        BNE     MLS1_10
        JSR     Mon_Get_Byte    ; get CRC
        LDB     Mon_CRC
        COMB
        CMPR    A,B             ; compare against computed CRC
        BNE     MSL1_20         ; -> checksum error
        LDD     Mon_Records     ; Increment S5 record counter
        INCD
        STD     Mon_Records
        JMP     ML_10
MSL1_20 LDX     #Msg_Checksum_Error
        CALL    PUTS
        RTS


***********
Mon_Load_S5
***********

        JSR     Mon_ReadSRecords; Receive number of S1 records
        JSR     Mon_ReadHeader  ; to ensure data integrity
        CMPY    Mon_Records
        LBEQ    ML_10           ; -> number of records matches
        LDX     #Msg_ExtraOrMissingData
        CALL    PUTS
        RTS


***********
Mon_Load_S9
***********

        JSR     Mon_ReadSRecords; Receive start address / entry point
        JSR     Mon_ReadHeader
        STY     Mon_Entry
        LDX     #Msg_StartingExAt
        CALL    PUTS
        LDD     Mon_Entry
        JSR     Mon_Show_Word
        LDX     #Msg_Dots
        CALL    PUTS
        JSR     [Mon_Entry]
        LDX     #Msg_MonHello
        CALL    PUTS
        RTS


Msg_LoadSRec
        FCC "\nLoading S-Record...\n\0"
Msg_Bad_SRec
        FCC "\nError: bad or unsupported S-record\n\0"
Msg_Checksum_Error
        FCC "\nChecksum error\n\0"
Msg_Aborted
        FCC "\n\n*** Aborted ***\n\n\0"
Msg_LineTooLong
        FCC "\nLine too long error\n\0"
Msg_ExtraOrMissingData
        FCC "\nExtra or missing data\n\0"
Msg_StartingExAt
        FCC "\nStarting execution at $\0"
Msg_Dots
        FCC "...\n\0"


********
Mon_Time
********

***********************************************
* T? shows real time clock's date and time    *
* T= sets date and time                       *
* time and date format is YYYY-MM-DD hh:mm:ss *
* e.g. T=2020-06-19 19:21:53                  *
***********************************************

        LDA     ,X+             ; Read or set clock?
        CMPA    #'?'
        BEQ     Mon_Time_Get
        CMPA    #'='
        BEQ     Mon_Time_Set
        JMP     Mon_Syntax_Error

Mon_Time_Get
        LDY     #BUF_TXT
        JSR     RTC_Read
        LDA     #'2'
        CALL    PUTC
        LDA     #'0'
        CALL    PUTC
        LDY     #BUF_TXT
        LDA     ,Y+             ; YY
        JSR     Mon_Show_Byte
        JSR     Mon_Minus
        LDA     ,Y+             ; MM
        JSR     Mon_Show_Byte
        JSR     Mon_Minus
        LDA     ,Y+             ; DD
        JSR     Mon_Show_Byte
        JSR     Mon_Blank
        LDA     ,Y+             ; mm
        JSR     Mon_Show_Byte
        JSR     Mon_Colon
        LDA     ,Y+             ; hh
        JSR     Mon_Show_Byte
        JSR     Mon_Colon
        LDA     ,Y+             ; ss
        JSR     Mon_Show_Byte
        JSR     Mon_CRLF
        RTS

Mon_Time_Set
        LEAS    -6,S
        TFR     S,Y
        PSHS    Y
        LEAX    +2,X            ; skip century
        JSR     Mon_Get_Byte    ; YY
        STA     ,Y+
        LEAX    1,X             ; skip -
        JSR     Mon_Get_Byte    ; MM
        STA     ,Y+
        LEAX    1,X             ; skip -
        JSR     Mon_Get_Byte    ; DD
        STA     ,Y+
        LEAX    1,X             ; skip space
        JSR     Mon_Get_Byte    ; hh
        STA     ,Y+
        LEAX    1,X             ; skip colon
        JSR     Mon_Get_Byte    ; mm
        STA     ,Y+
        LEAX    1,X             ; skip colon
        JSR     Mon_Get_Byte    ; ss
        STA     ,Y+
        LEAX    1,X             ; skip colon
        PULS    Y
        JSR     RTC_Set
        LEAS    +6,S
        RTS

