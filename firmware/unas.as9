**************************************************************
* Unassembler for the Hitachi 6309 CPU : 19-APR-2020         *
* ---------------------------------------------------------- *
* Parts of this code were derived from the 6809 disassembler *
* of Jeff Tranter "https://github.com/jefftranter/6809"      *
**************************************************************

OP_INV   EQU    $00
OP_ABX   EQU    $01
OP_ADCA  EQU    $02
OP_ADCB  EQU    $03
OP_ADDA  EQU    $04
OP_ADDB  EQU    $05
OP_ADDD  EQU    $06
OP_ANDA  EQU    $07
OP_ANDB  EQU    $08
OP_ANDCC EQU    $09
OP_ASL   EQU    $0A
OP_ASLA  EQU    $0B
OP_ASLB  EQU    $0C
OP_ASR   EQU    $0D
OP_ASRA  EQU    $0E
OP_ASRB  EQU    $0F
OP_BCC   EQU    $10
OP_BCS   EQU    $11
OP_BEQ   EQU    $12
OP_BGE   EQU    $13
OP_BGT   EQU    $14
OP_BHI   EQU    $15
OP_BITA  EQU    $16
OP_BITB  EQU    $17
OP_BLE   EQU    $18
OP_BLS   EQU    $19
OP_BLT   EQU    $1A
OP_BMI   EQU    $1B
OP_BNE   EQU    $1C
OP_BPL   EQU    $1D
OP_BRA   EQU    $1E
OP_BRN   EQU    $1F
OP_BSR   EQU    $20
OP_BVC   EQU    $21
OP_BVS   EQU    $22
OP_CLR   EQU    $23
OP_CLRA  EQU    $24
OP_CLRB  EQU    $25
OP_CMPA  EQU    $26
OP_CMPB  EQU    $27
OP_CMPD  EQU    $28
OP_CMPS  EQU    $29
OP_CMPU  EQU    $2A
OP_CMPX  EQU    $2B
OP_CMPY  EQU    $2C
OP_COMA  EQU    $2D
OP_COMB  EQU    $2E
OP_COM   EQU    $2F
OP_CWAI  EQU    $30
OP_DAA   EQU    $31
OP_DEC   EQU    $32
OP_DECA  EQU    $33
OP_DECB  EQU    $34
OP_EORA  EQU    $35
OP_EORB  EQU    $36
OP_EXG   EQU    $37
OP_INC   EQU    $38
OP_INCA  EQU    $39
OP_INCB  EQU    $3A
OP_JMP   EQU    $3B
OP_JSR   EQU    $3C
OP_LBCC  EQU    $3D
OP_LBCS  EQU    $3E
OP_LBEQ  EQU    $3F
OP_LBGE  EQU    $40
OP_LBGT  EQU    $41
OP_LBHI  EQU    $42
OP_LBLE  EQU    $43
OP_LBLS  EQU    $44
OP_LBLT  EQU    $45
OP_LBMI  EQU    $46
OP_LBNE  EQU    $47
OP_LBPL  EQU    $48
OP_LBRA  EQU    $49
OP_LBRN  EQU    $4A
OP_LBSR  EQU    $4B
OP_LBVC  EQU    $4C
OP_LBVS  EQU    $4D
OP_LDA   EQU    $4E
OP_LDB   EQU    $4F
OP_LDD   EQU    $50
OP_LDS   EQU    $51
OP_LDU   EQU    $52
OP_LDX   EQU    $53
OP_LDY   EQU    $54
OP_LEAS  EQU    $55
OP_LEAU  EQU    $56
OP_LEAX  EQU    $57
OP_LEAY  EQU    $58
OP_LSR   EQU    $59
OP_LSRA  EQU    $5A
OP_LSRB  EQU    $5B
OP_MUL   EQU    $5C
OP_NEG   EQU    $5D
OP_NEGA  EQU    $5E
OP_NEGB  EQU    $5F
OP_NOP   EQU    $60
OP_ORA   EQU    $61
OP_ORB   EQU    $62
OP_ORCC  EQU    $63
OP_PSHS  EQU    $64
OP_PSHU  EQU    $65
OP_PULS  EQU    $66
OP_PULU  EQU    $67
OP_ROL   EQU    $68
OP_ROLA  EQU    $69
OP_ROLB  EQU    $6A
OP_ROR   EQU    $6B
OP_RORA  EQU    $6C
OP_RORB  EQU    $6D
OP_RTI   EQU    $6E
OP_RTS   EQU    $6F
OP_SBCA  EQU    $70
OP_SBCB  EQU    $71
OP_SEX   EQU    $72
OP_STA   EQU    $73
OP_STB   EQU    $74
OP_STD   EQU    $75
OP_STS   EQU    $76
OP_STU   EQU    $77
OP_STX   EQU    $78
OP_STY   EQU    $79
OP_SUBA  EQU    $7A
OP_SUBB  EQU    $7B
OP_SUBD  EQU    $7C
OP_SWI   EQU    $7D
OP_SWI2  EQU    $7E
OP_SWI3  EQU    $7F
OP_SYNC  EQU    $80
OP_TFR   EQU    $81
OP_TST   EQU    $82
OP_TSTA  EQU    $83
OP_TSTB  EQU    $84
OP_LDMD  EQU    $85
OP_LDE   EQU    $86
OP_LDF   EQU    $87
OP_LDW   EQU    $88
OP_TFM   EQU    $89
OP_CLRD  EQU    $8A
OP_CLRW  EQU    $8B
OP_DECW  EQU    $8C
OP_STE   EQU    $8D
OP_STF   EQU    $8E
OP_DECD  EQU    $8F
OP_LSRD  EQU    $90
OP_CMPE  EQU    $91
OP_CMPF  EQU    $92
OP_CMPW  EQU    $93
OP_SEXW  EQU    $94
OP_LDQ   EQU    $95
OP_LSLD  EQU    $96
OP_DECE  EQU    $97
OP_DECF  EQU    $98
OP_INCE  EQU    $99
OP_INCF  EQU    $9A
OP_ADDR  EQU    $9B
OP_ADCR  EQU    $9C
OP_SUBR  EQU    $9D
OP_SBCR  EQU    $9E
OP_ANDR  EQU    $9F
OP_ORR   EQU    $A0
OP_EORR  EQU    $A1
OP_CMPR  EQU    $A2
OP_COME  EQU    $A3
OP_INCD  EQU    $A4
OP_STW   EQU    $A5
OP_STQ   EQU    $A6
OP_PSHSW EQU    $A7
OP_ADDW  EQU    $A8
OP_CLRE  EQU    $A9
OP_ASRD  EQU    $AA
OP_PULSW EQU    $AB
OP_TSTE  EQU    $AC
OP_DIVQ  EQU    $AD
OP_SUBF  EQU    $AE
OP_PSHUW EQU    $AF
OP_PULUW EQU    $B0
OP_TIM   EQU    $B1
OP_AIM   EQU    $B2
OP_EIM   EQU    $B3
OP_OIM   EQU    $B4
OP_BAND  EQU    $B5
OP_BIAND EQU    $B6
OP_BOR   EQU    $B7
OP_BIOR  EQU    $B8
OP_BEOR  EQU    $B9
OP_BIEOR EQU    $BA
OP_LDBT  EQU    $BB
OP_STBT  EQU    $BC
OP_NEGD  EQU    $BD
OP_COMD  EQU    $BE
OP_RORD  EQU    $BF
OP_ROLD  EQU    $C0
OP_TSTD  EQU    $C1
OP_COMW  EQU    $C2
OP_LSRW  EQU    $C3
OP_RORW  EQU    $C4
OP_ROLW  EQU    $C5
OP_INCW  EQU    $C6
OP_TSTW  EQU    $C7
OP_SUBW  EQU    $C8
OP_SBCD  EQU    $C9
OP_ANDD  EQU    $CA
OP_BITD  EQU    $CB
OP_EORD  EQU    $CC
OP_ADCD  EQU    $CD
OP_ORD   EQU    $CE
OP_BITMD EQU    $CF
OP_COMF  EQU    $D0
OP_TSTF  EQU    $D1
OP_CLRF  EQU    $D2
OP_SUBE  EQU    $D3
OP_ADDE  EQU    $D4
OP_DIVD  EQU    $D5
OP_MULD  EQU    $D6
OP_ADDF  EQU    $D7

; Addressing Modes. Mon_OCS table lists these for each instruction.
; LENGTHS lists the instruction length for each addressing mode.
; Need to distinguish relative modes that are 2 and 3 (long) bytes.
; Some immediate are 2 and some 3 bytes.
; Indexed modes can be longer depending on postbyte.
; Page 2 and 3 opcodes are one byte longer (prefixed by 10 or 11)

AM_INVALID   EQU     0       ; $15             (1)
AM_INHERENT  EQU     1       ; RTS             (1)
AM_IMM_BYTE  EQU     2       ; LDA  #$12       (2)
AM_IMM_WORD  EQU     3       ; LDD  #$1234     (3)
AM_IMM_LONG  EQU     4       ; LDQ  #$12345678 (5)
AM_DIRECT    EQU     5       ; LDA  $12        (2)
AM_EXTENDED  EQU     6       ; LDA  $1234      (3)
AM_REL_BYTE  EQU     7       ; BSR  $1234      (2)
AM_REL_WORD  EQU     8       ; LBSR $1234      (3)
AM_INDEXED   EQU     9       ; LDA  0,X        (2+)
AM_REGREG    EQU    10       ; TFR  D,X        (2)
AM_PUSHPULL  EQU    11       ; PSHS X,Y        (2)
AM_IMM_DIR   EQU    12       ; AIM  #8,$12     (3)
AM_IMM_EXT   EQU    13       ; TIM  #8,$1234   (4)
AM_IMM_IND   EQU    14       ; OIM  #8,X       (3+)
AM_BIT_BIT   EQU    15       ; OIM  #8,X       (3+)

*************************
SUBROUTINE Mon_Unassemble
*************************

***************************************
* Unassemble memory range to screen   *
* Read two hex words for start and    *
* stop :XXXX WWWW                     *
* ----------------------------------- *
* Input : X = pointer to input buffer *
*         Mon_Adr = default start     *
* Output: X = advanced                *
*         Mon_Adr = next instruction  *
*         D,W modified                *
***************************************

        LDW     Mon_Adr         ; preset
        JSR     Mon_Get_Word
        STW     Mon_Adr         ; store start
        ADDW    #32             ; preset
        JSR     Mon_Get_Word

.loop   PSHSW                   ; Save end address
        JSR     DISASM          ; Do disassembly of one instruction
        PULSW                   ; Restore end address
        CMPW    Mon_Adr         ; Compare end condition
        BCS     .loop           ; Loop until done
        RTS                     ; Return to caller
ENDSUB

*********************
SUBROUTINE PrintComma
*********************

        PSHS    D
        LDA     #','
        CALL    PUTC
        PULS    D,PC
ENDSUB

*******************
SUBROUTINE PrintDot
*******************

        PSHS    D
        LDA     #'.'
        CALL    PUTC
        PULS    D,PC
ENDSUB

*****************
SUBROUTINE PrintW
*****************

        PSHS    D
        LDA     #'W'
        CALL    PUTC
        PULS    D,PC
ENDSUB

**********************
SUBROUTINE PrintDollar
**********************

        PSHS    D
        TST     Mon_Dollar
        BEQ     .No
        LDA     #'$'
        CALL    PUTC
.No     PULS    D,PC
ENDSUB

********************
SUBROUTINE PrintHash
********************

        PSHS    D
        LDA     #'#'
        CALL    PUTC
        BSR     PrintDollar
        PULS    D
.No     RTS
ENDSUB

**********************
SUBROUTINE PrintSpaces
**********************

********************************
* Input : E = number of spaces *
********************************

        PSHS    D
        TSTE                    ; Is count zero?
        BEQ     .PS2            ; Is so, done
.PS1    JSR     Mon_Blank       ; Print a space
        DECE                    ; Decrement count
        BNE     .PS1            ; Check again
.PS2    PULS    D,PC
ENDSUB

*******************
SUBROUTINE PrintPCR
*******************
        LDX     #.PCR
        BRA     PrintString
.PCR    FCB     "PCR",0
ENDSUB

**********************
SUBROUTINE PrintString
**********************

******************************
* Input : X = string address *
******************************
        PSHS    D,X             ; Save registers used
        JSR     [VECTBL+PUTS*2] ; Call monitor function
        PULS    D,X,PC
ENDSUB

**********************
SUBROUTINE PrintRegReg
**********************
        PSHS    D
        ANDA    #15
        LSLA
        LDD     A,Y
        PSHS    B
        CALL    PUTC
        PULS    A
        TSTA
        BEQ     .Return
        CALL    PUTC
.Return PULS    D,PC
ENDSUB

*******************
SUBROUTINE PrintTFM
*******************
        TSTW                    ; Initial call ?
        BMI     .Return         ; Not in TFM instruction
        BNE     .Sign           ; Print sign
        LDF     ,X              ; Get op code
        SUBW    #$38            ; Start of TFM codes
        CMPW    #4              ; Code range $38,$39,$3A,$3B
        BLO     .Sign           ; Is TFM code
        LDW     #-1             ; Disable
        RTS                     ; Return
.Sign   LDA     TFMS,W          ; Load sign character
        BEQ     .Skip           ; Not present
        CALL    PUTC            ; Print it
.Skip   ADDW    #4              ; Position to target table
.Return RTS
ENDSUB

***************************
SUBROUTINE Print5BitDecimal
***************************
        ANDA    #%0001 1111     ; mask 5 bits
        BITA    #%0001 0000     ; Test sign
        BEQ     .P5B1           ; -> positive
        JSR     PrintMinus      ; Print minus sign
        ORA     #%1111 0000     ; Extend sign
        NEGA                    ; Make positive
.P5B1   CMPA    #10             ; Offset >= 10 ?
        BLO     .P5B2           ; -> only 1 digit
        PSHS    A               ; Save A
        LDA     #'1'            ; Printh 10th.
        CALL    PUTC
        PULS    A               ; Restore A
        SUBA    #10             ; Remove 10th.
.P5B2   ORA     #'0'            ; To ASCII
        CALL    PUTC
        RTS

*****************
SUBROUTINE DISASM
*****************

*************************************************
* Disassemble instruction at address Mon_Adr.   *
* On return, Mon_Adr points to next instruction *
* so it can be called again.                    *
*************************************************

        CLR     Mon_Pg23        ; Clear page2/3 flag
        LDY     #PAGE3          ; Pointer to PAGE3
        LDX     Mon_Adr         ; Get address of instruction
        LDB     ,X              ; Get instruction op code
        STB     Mon_OC          ; Save the op code
        CMPB    #$11            ; Is it a page 3 16-bit opcode prefix with 11?
        BEQ     handle23        ; If so, do special handling
        LDY     #PAGE2          ; Pointer to PAGE2
        CMPB    #$10            ; Is it a page 2 16-bit opcode prefix with 10?
        BNE     not23           ; If not, handle as normal case
handle23
        INC     Mon_Pg23        ; Set page2/3 flag
        LDB     1,X             ; Get real opcode
        STB     Mon_OC          ; Save it.
search23
        CMPB    ,Y              ; Check for match of opcode in table
        BEQ     found23         ; Branch if found
        LEAY    3,Y             ; Advance to next entry in table
        TST     ,Y              ; Check entry
        BNE     search23        ; If not, keep looking
                                ; Instruction not found, so is invalid.
        LDA     #OP_INV         ; Set as instruction type invalid
        STA     Mon_OT
        LDA     #AM_INVALID     ; Set as addressing mode invalid
        STA     Mon_AM
        LDA     #1              ; Set length to one
        STA     Mon_Len
        BRA     dism            ; Disassemble as normal
found23                         ; Found entry in table
        LDD     1,Y             ; Get instruction type & address mode
        STA     Mon_OT          ; Save type
        STB     Mon_AM          ; Save mode
        LDX     #LENGTHS        ; Load length table
        LDB     B,X             ; Get instruction length from table
        INCB                    ; Add one because it is a two byte op code
        STB     Mon_Len         ; Store it
        BRA     dism            ; Continue normal disassembly processing.
not23
        CLRA                    ; Clear MSB of D
        TFR     D,X             ; Put op code in X
        LDB     Mon_OCS,X       ; Get opcode type from table
        STB     Mon_OT          ; Store it
        LDB     MODES,X         ; Get addressing mode type from table
        STB     Mon_AM          ; Store it
        TFR     D,X             ; Put addressing mode in X
        LDB     LENGTHS,X       ; Get instruction length from table
        STB     Mon_Len         ; Store it

; If addressing mode is indexed, get and save the indexed addressing post byte.

dism    LDA     Mon_AM          ; Get addressing mode
        CMPA    #AM_INDEXED     ; Is it indexed mode?
        BNE     NotIndexed      ; Branch if not
        LDX     Mon_Adr         ; Get address of op code
        LDB     Mon_Pg23        ; Page2/3 instruction?
        INCB                    ; post byte position
        LDA     B,X             ; Get post byte
        STA     Mon_PB          ; Save it

; Determine number of additional bytes for indexed addressing based on
; postbyte. If most significant bit is 0, there are no additional
; bytes and we can skip the rest of the check.

        BPL     NotIndexed      ; Branch of MSB is zero
        CMPA    #$AF            ; nnnn,W
        BEQ     dismW
        CMPA    #$B0            ; [nnnn,W]
        BNE     dism10

dismW   LDA     #2
        BRA     dism20

; Else if most significant bit is 1, mask off all but low order 4 bits
; and look up length in table.

dism10  ANDA    #%00001111      ; Mask off bits
        LDX     #Mon_PBES       ; Lookup table of lengths
        LDA     A,X             ; Get table entry
dism20  ADDA    Mon_Len         ; Add to instruction length
        STA     Mon_Len         ; Save new length

NotIndexed
        LDD     Mon_Adr
        JSR     Mon_Show_Word   ; print address

; Print the op code bytes based on the instruction length

        LDE     Mon_Len         ; Number of bytes in instruction
        LDX     Mon_Adr         ; Pointer to start of instruction
opby    LDA     ,X+             ; Get instruction byte and increment pointer
        JSR     Mon_Show_Blank_Byte
        DECE                    ; Decrement byte count
        BNE     opby            ; Repeat until done

; Print needed remaining spaces to pad out to correct column

        LDX     #PADDING-1      ; Pointer to start of lookup table
        LDA     Mon_Len         ; Number of bytes in instruction
        LDE     A,X             ; Get number of spaces to print
        JSR     PrintSpaces

; If a page2/3 instruction, advance Mon_Adr to the next byte

        CLRA
        LDB     Mon_Pg23        ; 1 for page 2/3
        ADDD    Mon_Adr         ; Increment 16-bit address
        STD     Mon_Adr

; Get and print mnemonic (5 chars) (3 bytes packed)

        LDB     Mon_OT          ; Get instruction type to index into table
        LDX     #MNEMONICS-1    ; Pointer to start of table
        ABX
        ABX
        ABX                     ; index * 3
        LDQ     ,X              ; packed chars
        PSHS    B               ; save for 5th. char
        ANDB    #15             ; clear high nibble
        LDA     #4
        STA     MON_TMP         ; countdown
        CLRA                    ; only 24 bits used

noinc10 DIVQ    #32             ; extract 5 bits
        TFR     B,A             ; 5 bit encoded char
        CMPA    #1              ; blank
        BNE     noinc15
        LDA     #-31

noinc15 ADDA    #'?'            ; add offset
        CMPA    #'Z'
        BLS     noinc20
        SUBA    #$29            ; for '2' and '3'

noinc20 CALL    PUTC
        CLRD                    ; clear upper part of Q
        DEC     MON_TMP
        BNE     noinc10
        PULS    B               ; code for 5th. char
        LSRB
        LSRB
        LSRB
        LSRB
        CLRA
        TFR     D,W
        LDA     MNE5,W
        CALL    PUTC
        JSR     Mon_Blank

        LDX     Mon_Adr         ; Load op code address
        LDD     1,X             ; Load operand
        LDY     #AM_Table       ; Table of AM subroutines
        LDE     Mon_AM          ; Index for table
        ADDR    E,E             ; Shift for word address
        JSR     [E,Y]           ; Call subroutine

        JSR     Mon_CRLF        ; Print final CR
        CLRA                    ; Clear MSB of D
        LDB     Mon_Len         ; Get length byte in LSB of D
        SUBB    Mon_Pg23        ; Page 2/3 prefix byte
        ADDD    Mon_Adr         ; Add to address
        STD     Mon_Adr         ; Write new address
        RTS
ENDSUB

********
AM_Table
********
        WORD    SUB_INVALID   ;  0
        WORD    SUB_INHERENT  ;  1
        WORD    SUB_IMM_BYTE  ;  2
        WORD    SUB_IMM_WORD  ;  3
        WORD    SUB_IMM_LONG  ;  4
        WORD    PrintByte     ;  5
        WORD    PrintWord     ;  6
        WORD    SUB_REL_BYTE  ;  7
        WORD    SUB_REL_WORD  ;  8
        WORD    SUB_INDEXED   ;  9
        WORD    SUB_REGREG    ; 10
        WORD    SUB_PUSHPULL  ; 11
        WORD    SUB_IMM_DIR   ; 12
        WORD    SUB_IMM_EXT   ; 13
        WORD    SUB_IMM_IND   ; 14
        WORD    SUB_BIT_BIT   ; 15


**********************
SUBROUTINE SUB_INVALID
**********************
        LDE     #15             ; Want 15 spaces
        JSR     PrintSpaces
        LDX     #MSG1
        JMP     PrintString
ENDSUB

***********************
SUBROUTINE SUB_INHERENT
***********************
        RTS
ENDSUB

********************
SUBROUTINE PrintByte
********************
        JSR     PrintDollar
        JMP     Mon_Show_Byte
ENDSUB

********************
SUBROUTINE PrintWord
********************
        JSR     PrintDollar
        JMP     Mon_Show_Word
ENDSUB

***********************
SUBROUTINE SUB_IMM_BYTE
***********************
        JSR     PrintHash
        JMP     Mon_Show_Byte   ; Print as hex value
ENDSUB

***********************
SUBROUTINE SUB_IMM_WORD
***********************
        JSR     PrintHash
        JMP     Mon_Show_Word   ; Print as hex value
ENDSUB

***********************
SUBROUTINE SUB_IMM_LONG
***********************
        JSR     SUB_IMM_WORD    ; Print MSB word
        LDD     3,X             ; Get LSB word
        JMP     Mon_Show_Word   ; Print it
ENDSUB

**********************
SUBROUTINE SUB_IMM_DIR
**********************
        JSR     SUB_IMM_BYTE    ; Immediate byte
        JSR     PrintComma
        LDA     2,X             ; Memory byte
        JMP     Mon_Show_Byte
ENDSUB

**********************
SUBROUTINE SUB_IMM_EXT
**********************
        JSR     SUB_IMM_DIR
        LDA     3,X             ; LSB memory word
        JMP     Mon_Show_Byte
ENDSUB

**********************
SUBROUTINE SUB_IMM_IND
**********************
        JSR     SUB_IMM_BYTE    ; Print immediate byte
        JSR     PrintComma      ; And comma
        LDD     #1
        STB     Mon_Pg23        ; Mark as 2 byte opcode
        ADDD    Mon_Adr         ; Adjust memory pointer
        STD     Mon_Adr
        TFR     D,X             ; Point at one before PB
        LDA     1,X             ; Load post byte
        STA     Mon_PB          ; store it
        JMP     SUB_INDEXED
ENDSUB

**********************
SUBROUTINE SUB_BIT_BIT
**********************
        LDA     1,X             ; Bit 7/6 = register
        ROLA                    ; 00 = CC
        ROLA                    ; 01 = A
        ROLA                    ; 10 = B
        ANDA    #3              ; 11 = invalid
        LDY     #PushPullName
        JSR     PrintRegReg     ; Target register
        JSR     PrintDot
        LDA     1,X             ; Bit 2,1,0 = target bit
        ANDA    #7
        ORA     #'0'            ; To ASCII
        CALL    PUTC
        JSR     PrintComma
        LDA     2,X             ; Direct page address
        JSR     PrintByte
        JSR     PrintDot
        LDA     1,X             ; Bit 5,4,3 = source bit
        LSRA
        LSRA
        LSRA
        ANDA    #7
        ORA     #'0'            ; To ASCII
        CALL    PUTC
        RTS
ENDSUB

        LDBT    A.6,$77.4

*********************
SUBROUTINE SUB_REGREG
*********************
        CLRW                    ; Initialize TFM check
        LDY     #RegisterName   ; Setup table
        LSRA                    ; Shift into low order bits
        LSRA
        LSRA
        LSRA
        JSR     PrintRegReg     ; Print source register name
        JSR     PrintTFM        ; Print TFM direction
        JSR     PrintComma
        LDA     1,X             ; Get postbyte again
        JSR     PrintRegReg     ; Print destination register name
        JMP     PrintTFM        ; Print TFM direction
ENDSUB

***********************
SUBROUTINE SUB_PUSHPULL
***********************
        CLR     Mon_First       ; Comma flag
        LDY     #PushPullName   ; Register names
        LDA     #0              ; Bit count
        LDB     1,X             ; Get postbyte
PULP10  LSRB                    ; Check next register
        BCC     PULP30          ; Not used
        TST     Mon_First       ; 1st. register name ?
        BEQ     PULP20          ; yes: no comma
        JSR     PrintComma
PULP20  INC     Mon_First
        CMPA    #6              ; U/S register
        BNE     PULP25
        LDE     ,X              ; op code
        CMPE    #OP_PSHU        ; For PSHU
        BEQ     PULP22          ; And PULU
        CMPE    #OP_PULU        ; Bit 6 marks
        BNE     PULP25          ; Register S
PULP22  LDA     #'S'
        CALL    PUTC
        LDA     #7
        BRA     PULP10
PULP25  JSR     PrintRegReg     ; Print register
PULP30  INCA
        CMPA    #8
        BLO     PULP10
        RTS

************************
SUBROUTINE SUB_REL_BYTE
************************

; Destination address for relative branch is
; address of opcode + (sign ; extended) offset
;   $1015 + $(FF)FC + 2 = $1013
;   $101B + $(00)27 + 2 = $1044

        LDB     1,X             ; Get first byte (8-bit branch offset)
        SEX                     ; Sign extend to 16 bits
        ADDD    #2              ; Add 2
Mon_Rel ADDR    X,D             ; Add address of op code
        JMP     PrintWord       ; Print as hex value
ENDSUB

*************************
SUBROUTINE SUB_REL_WORD
*************************

; Destination address calculation is similar to above, except offset
; is 16 bits and need to add 3.

        ADDD    #3              ; Add 3
        BRA     Mon_Rel
ENDSUB

; Postbyte  Format  Additional Bytes
; --------  ------  ----------------
; 1RRI0100      ,R
; 1RRI1000    nn,R    1
; 1RRI1001  nnnn,R    2
; 1RRI0110     A,R
; 1RRI0101     B,R
; 1RRI1011     D,R
; 1RRI0000      ,R+
; 1RRI0001      ,R++
; 1RRI0010      ,-R
; 1RRI0011      ,--R
; 1xxI1100    nn,PCR  1
; 1xxI1101  nnnn,PCR  2
; 10011111   [n]      2

; RR: 00=X 01=Y 10=U 11=S
;  I: 1=Indirect []

*       LDE     ,W
*       LDF     [,W]
*       LDB     $5678,X
*       LDA     $1234,W
*       LDB     [$5678,X]
*       LDA     [$1234,W]
*       LDX     ,W++
*       LDX     [,W++]
*       LDY     [,--W]
*       STF     [$1234]

*******
PB_MASK
*******
        BYTE    INX_W        , %10001111 ;      ,W
        BYTE    INX_W        , %10010000 ;     [,W]
        BYTE    INX_WordW    , %10101111 ;  nnnn,W
        BYTE    INX_WordW    , %10110000 ; [nnnn,W]
        BYTE    INX_WPP      , %11001111 ;      ,W++
        BYTE    INX_WPP      , %11010000 ;     [,W++]
        BYTE    INX_MMW      , %11101111 ;    --,W
        BYTE    INX_MMW      , %11110000 ;   [--,W]
        BYTE    PrintWord    , %10011111 ; [nnnn]

        BYTE    INX_Reg      , %10000100 ;      ,R
        BYTE    INX_ByteReg  , %10001000 ;    nn,R
        BYTE    INX_WordReg  , %10001001 ;  nnnn,R
        BYTE    INX_AReg     , %10000110 ;     A,R
        BYTE    INX_BReg     , %10000101 ;     B,R
        BYTE    INX_DReg     , %10001011 ;     D,R
        BYTE    INX_EReg     , %10000111 ;     E,R
        BYTE    INX_FReg     , %10001010 ;     F,R
        BYTE    INX_WReg     , %10001110 ;     W,R
        BYTE    INX_Rp       , %10000000 ;      ,R+
        BYTE    INX_Rpp      , %10000001 ;      ,R++
        BYTE    INX_mR       , %10000010 ;      ,-R
        BYTE    INX_mmR      , %10000011 ;      ,--R
        BYTE    INX_BytePC   , %10001100 ;    nn,PC
        BYTE    INX_WordPC   , %10001101 ;  nnnn,PC
        BYTE    0,0

**********************
SUBROUTINE SUB_INDEXED
**********************

******* 5 bit offset , register X,Y,U,S *******

        LDA     Mon_PB          ; Get postbyte
        BMI     .InxA           ; Branch if MSB is 1
        JSR     Print5BitDecimal; Offset
        BRA     PrintCommaReg   ; ,R

******* register operands with X,Y,U,S,W ******

.InxA   LDY     #PB_MASK        ; Table of masks
.InxB   LDW     ,Y++            ; Subroutine
        BEQ     .InxR           ; -> end of table
        CMPW    #INX_Reg        ; begin of X,Y,U,S instructions
        BNE     .InxC
        ANDA    #%1000 1111     ; Clear register and indirect bit
.InxC   CMPA    ,Y+             ; Mask
        BNE     .InxB           ; Loop
        BSR     PrintLBracket   ; if indirect
        LDX     Mon_Adr         ; op code
        LDD     2,X             ; address
        JSR     ,W              ; print operand
        BRA     PrintRBracket   ; if indirect
.InxR   RTS
ENDSUB

************************
SUBROUTINE PrintCommaReg
************************

        JSR     PrintComma      ; fall through
ENDSUB

*********************
SUBROUTINE PrintIndex
*********************

***************************************
* Print register name encoded in bits *
* 6 and 5 of A for indexed addressing *
* A=.RR.....  RR: 00=X 01=Y 10=U 11=S *
***************************************

        LDA     Mon_PB          ; load post byte
        ROLA                    ; rotate register bits
        ROLA                    ; through carry
        ROLA                    ; to bit 1 and bit 0
        ROLA
        ANDA    #%00000011      ; Mask out other bits
        CMPA    #%00000010      ; X or Y
        BLO     .LAB
        INCA
        ANDA    #%00000110
        COMA                    ; U or S
.LAB    ADDA    #'X'
        CALL    PUTC            ; Print it
        RTS
ENDSUB

************************
SUBROUTINE PrintLBracket
************************

        LDA     #'['
        BRA     PrintDelimiter
ENDSUB

************************
SUBROUTINE PrintRBracket
************************

        LDA     #']'          ; fall through
ENDSUB

*************************
SUBROUTINE PrintDelimiter
*************************

        TIM     #$10,Mon_PB   ; indirect bit
        BEQ     .Return
        PSHS    D
        CALL    PUTC
        PULS    D
.Return RTS
ENDSUB

****************
SUBROUTINE INX_W
****************
        JSR     PrintComma
        JMP     PrintW
ENDSUB

********************
SUBROUTINE INX_WordW
********************
        JSR     PrintWord
        JSR     PrintComma
        JMP     PrintW
ENDSUB

******************
SUBROUTINE INX_WPP
******************
        LDX     #MSGWPP
        JMP     PrintString
ENDSUB

******************
SUBROUTINE INX_MMW
******************
        LDX     #MSGMMW
        JMP     PrintString
ENDSUB

******************
SUBROUTINE INX_Reg
******************
        BRA     PrintCommaReg   ; ,R
ENDSUB

***********************
SUBROUTINE INX_ByteReg
***********************
        JSR     PrintByte       ; Print offset
        BRA     PrintCommaReg   ; Print ,R
ENDSUB

**********************
SUBROUTINE INX_WordReg
**********************
        JSR     PrintWord
        BRA     PrintCommaReg
ENDSUB

*******************
SUBROUTINE INX_AReg
*******************
        LDA     #'A'          ; fall through
ENDSUB

*****************
SUBROUTINE INX_RR
*****************
        CALL    PUTC
        BRA     PrintCommaReg
ENDSUB

*******************
SUBROUTINE INX_BReg
*******************
        LDA     #'B'
        BRA     INX_RR
ENDSUB

*******************
SUBROUTINE INX_DReg
*******************
        LDA     #'D'
        BRA     INX_RR
ENDSUB

*******************
SUBROUTINE INX_EReg
*******************
        LDA     #'E'
        BRA     INX_RR
ENDSUB

*******************
SUBROUTINE INX_FReg
*******************
        LDA     #'F'
        BRA     INX_RR
ENDSUB

*******************
SUBROUTINE INX_WReg
*******************
        LDA     #'W'
        BRA     INX_RR
ENDSUB

*****************
SUBROUTINE INX_Rp
*****************
        BSR     PrintCommaReg
        BRA     PrintPlus
ENDSUB

******************
SUBROUTINE INX_Rpp
******************
        BSR     PrintCommaReg
        BSR     PrintPlus
        BRA     PrintPlus
ENDSUB

*****************
SUBROUTINE INX_mR
*****************
        JSR     PrintComma
        BSR     PrintMinus
        JMP     PrintIndex
ENDSUB

******************
SUBROUTINE INX_mmR
******************
        JSR     PrintComma
        BSR     PrintMinus
        BSR     PrintMinus
        JMP     PrintIndex
ENDSUB

*********************
SUBROUTINE INX_BytePC
*********************
        JSR     PrintByte       ; Display it
        JSR     PrintComma      ; Print comma
        JMP     PrintPCR        ; Print PCR
ENDSUB

*********************
SUBROUTINE INX_WordPC
*********************
        JSR     PrintWord       ; Display it
        JSR     PrintComma      ; Print comma
        JMP     PrintPCR        ; Print PCR
ENDSUB

********************
SUBROUTINE PrintPlus
********************

        PSHS    D
        LDA     #'+'
        CALL    PUTC
        PULS    D,PC
ENDSUB

********************
SUBROUTINE PrintMinus
********************

        PSHS    D
        LDA     #'-'
        CALL    PUTC
        PULS    D,PC
ENDSUB

***********************
SUBROUTINE Mon_Assemble
***********************

        RTS
ENDSUB

****************
* DATA SECTION *
****************

MNE5    BYTE    " CDRW"

**************************************
* Table of mnemonic strings          *
* 5 chars packed in 3 byte per entry *
**************************************

MNEMONICS
        C5TO3   "???  "         ; $00
        C5TO3   "ABX  "         ; $01
        C5TO3   "ADCA "         ; $02
        C5TO3   "ADCB "         ; $03
        C5TO3   "ADDA "         ; $04
        C5TO3   "ADDB "         ; $05
        C5TO3   "ADDD "         ; $06
        C5TO3   "ANDA "         ; $07
        C5TO3   "ANDB "         ; $08
        C5TO3   "ANDCC"         ; $09
        C5TO3   "ASL  "         ; $0A
        C5TO3   "ASLA "         ; $0B
        C5TO3   "ASLB "         ; $0C
        C5TO3   "ASR  "         ; $0D
        C5TO3   "ASRA "         ; $0E
        C5TO3   "ASRB "         ; $0F
        C5TO3   "BCC  "         ; $10
        C5TO3   "BCS  "         ; $11
        C5TO3   "BEQ  "         ; $12
        C5TO3   "BGE  "         ; $13
        C5TO3   "BGT  "         ; $14
        C5TO3   "BHI  "         ; $15
        C5TO3   "BITA "         ; $16
        C5TO3   "BITB "         ; $17
        C5TO3   "BLE  "         ; $18
        C5TO3   "BLS  "         ; $19
        C5TO3   "BLT  "         ; $1A
        C5TO3   "BMI  "         ; $1B
        C5TO3   "BNE  "         ; $1C
        C5TO3   "BPL  "         ; $1D
        C5TO3   "BRA  "         ; $1E
        C5TO3   "BRN  "         ; $1F
        C5TO3   "BSR  "         ; $20
        C5TO3   "BVC  "         ; $21
        C5TO3   "BVS  "         ; $22
        C5TO3   "CLR  "         ; $23
        C5TO3   "CLRA "         ; $24
        C5TO3   "CLRB "         ; $25
        C5TO3   "CMPA "         ; $26
        C5TO3   "CMPB "         ; $27
        C5TO3   "CMPD "         ; $28
        C5TO3   "CMPS "         ; $29
        C5TO3   "CMPU "         ; $2A
        C5TO3   "CMPX "         ; $2B
        C5TO3   "CMPY "         ; $2C
        C5TO3   "COMA "         ; $2D
        C5TO3   "COMB "         ; $2E
        C5TO3   "COM  "         ; $2F
        C5TO3   "CWAI "         ; $30
        C5TO3   "DAA  "         ; $31
        C5TO3   "DEC  "         ; $32
        C5TO3   "DECA "         ; $33
        C5TO3   "DECB "         ; $34
        C5TO3   "EORA "         ; $35
        C5TO3   "EORB "         ; $36
        C5TO3   "EXG  "         ; $37
        C5TO3   "INC  "         ; $38
        C5TO3   "INCA "         ; $39
        C5TO3   "INCB "         ; $3A
        C5TO3   "JMP  "         ; $3B
        C5TO3   "JSR  "         ; $3C
        C5TO3   "LBCC "         ; $3D
        C5TO3   "LBCS "         ; $3E
        C5TO3   "LBEQ "         ; $3F
        C5TO3   "LBGE "         ; $40
        C5TO3   "LBGT "         ; $41
        C5TO3   "LBHI "         ; $42
        C5TO3   "LBLE "         ; $43
        C5TO3   "LBLS "         ; $44
        C5TO3   "LBLT "         ; $45
        C5TO3   "LBMI "         ; $46
        C5TO3   "LBNE "         ; $47
        C5TO3   "LBPL "         ; $48
        C5TO3   "LBRA "         ; $49
        C5TO3   "LBRN "         ; $4A
        C5TO3   "LBSR "         ; $4B
        C5TO3   "LBVC "         ; $4C
        C5TO3   "LBVS "         ; $4D
        C5TO3   "LDA  "         ; $4E
        C5TO3   "LDB  "         ; $4F
        C5TO3   "LDD  "         ; $50
        C5TO3   "LDS  "         ; $51
        C5TO3   "LDU  "         ; $52
        C5TO3   "LDX  "         ; $53
        C5TO3   "LDY  "         ; $54
        C5TO3   "LEAS "         ; $55
        C5TO3   "LEAU "         ; $56
        C5TO3   "LEAX "         ; $57
        C5TO3   "LEAY "         ; $58
        C5TO3   "LSR  "         ; $59
        C5TO3   "LSRA "         ; $5A
        C5TO3   "LSRB "         ; $5B
        C5TO3   "MUL  "         ; $5C
        C5TO3   "NEG  "         ; $5D
        C5TO3   "NEGA "         ; $5E
        C5TO3   "NEGB "         ; $5F
        C5TO3   "NOP  "         ; $60
        C5TO3   "ORA  "         ; $61
        C5TO3   "ORB  "         ; $62
        C5TO3   "ORCC "         ; $63
        C5TO3   "PSHS "         ; $64
        C5TO3   "PSHU "         ; $65
        C5TO3   "PULS "         ; $66
        C5TO3   "PULU "         ; $67
        C5TO3   "ROL  "         ; $68
        C5TO3   "ROLA "         ; $69
        C5TO3   "ROLB "         ; $6A
        C5TO3   "ROR  "         ; $6B
        C5TO3   "RORA "         ; $6C
        C5TO3   "RORB "         ; $6D
        C5TO3   "RTI  "         ; $6E
        C5TO3   "RTS  "         ; $6F
        C5TO3   "SBCA "         ; $70
        C5TO3   "SBCB "         ; $71
        C5TO3   "SEX  "         ; $72
        C5TO3   "STA  "         ; $73
        C5TO3   "STB  "         ; $74
        C5TO3   "STD  "         ; $75
        C5TO3   "STS  "         ; $76
        C5TO3   "STU  "         ; $77
        C5TO3   "STX  "         ; $78
        C5TO3   "STY  "         ; $79
        C5TO3   "SUBA "         ; $7A
        C5TO3   "SUBB "         ; $7B
        C5TO3   "SUBD "         ; $7C
        C5TO3   "SWI  "         ; $7D
        C5TO3   "SWI2 "         ; $7E
        C5TO3   "SWI3 "         ; $7F
        C5TO3   "SYNC "         ; $80
        C5TO3   "TFR  "         ; $81
        C5TO3   "TST  "         ; $82
        C5TO3   "TSTA "         ; $83
        C5TO3   "TSTB "         ; $84
        C5TO3   "LDMD "         ; $85
        C5TO3   "LDE  "         ; $86
        C5TO3   "LDF  "         ; $87
        C5TO3   "LDW  "         ; $88
        C5TO3   "TFM  "         ; $89
        C5TO3   "CLRD "         ; $8A
        C5TO3   "CLRW "         ; $8B
        C5TO3   "DECW "         ; $8C
        C5TO3   "STE  "         ; $8D
        C5TO3   "STF  "         ; $8E
        C5TO3   "DECD "         ; $8F
        C5TO3   "LSRD "         ; $90
        C5TO3   "CMPE "         ; $91
        C5TO3   "CMPF "         ; $92
        C5TO3   "CMPW "         ; $93
        C5TO3   "SEXW "         ; $94
        C5TO3   "LDQ  "         ; $95
        C5TO3   "LSLD "         ; $96
        C5TO3   "DECE "         ; $97
        C5TO3   "DECF "         ; $98
        C5TO3   "INCE "         ; $99
        C5TO3   "INCF "         ; $9A
        C5TO3   "ADDR "         ; $9B
        C5TO3   "ADCR "         ; $9C
        C5TO3   "SUBR "         ; $9D
        C5TO3   "SBCR "         ; $9E
        C5TO3   "ANDR "         ; $9F
        C5TO3   "ORR  "         ; $A0
        C5TO3   "EORR "         ; $A1
        C5TO3   "CMPR "         ; $A2
        C5TO3   "COME "         ; $A3
        C5TO3   "INCD "         ; $A4
        C5TO3   "STW  "         ; $A5
        C5TO3   "STQ  "         ; $A6
        C5TO3   "PSHSW"         ; $A7
        C5TO3   "ADDW "         ; $A8
        C5TO3   "CLRE "         ; $A9
        C5TO3   "ASRD "         ; $AA
        C5TO3   "PULSW"         ; $AB
        C5TO3   "TSTE "         ; $AC
        C5TO3   "DIVQ "         ; $AD
        C5TO3   "SUBF "         ; $AE
        C5TO3   "PSHUW"         ; $AF
        C5TO3   "PULUW"         ; $B0
        C5TO3   "TIM  "         ; $B1
        C5TO3   "AIM  "         ; $B2
        C5TO3   "EIM  "         ; $B3
        C5TO3   "OIM  "         ; $B4
        C5TO3   "BAND "         ; $B5
        C5TO3   "BIAND"         ; $B6
        C5TO3   "BOR  "         ; $B7
        C5TO3   "BIOR "         ; $B8
        C5TO3   "BEOR "         ; $B9
        C5TO3   "BIEOR"         ; $BA
        C5TO3   "LDBT "         ; $BB
        C5TO3   "STBT "         ; $BC
        C5TO3   "NEGD "         ; $BD
        C5TO3   "COMD "         ; $BE
        C5TO3   "RORD "         ; $BF
        C5TO3   "ROLD "         ; $C0
        C5TO3   "TSTD "         ; $C1
        C5TO3   "COMW "         ; $C2
        C5TO3   "LSRW "         ; $C3
        C5TO3   "RORW "         ; $C4
        C5TO3   "ROLW "         ; $C5
        C5TO3   "INCW "         ; $C6
        C5TO3   "TSTW "         ; $C7
        C5TO3   "SUBW "         ; $C8
        C5TO3   "SBCD "         ; $C9
        C5TO3   "ANDD "         ; $CA
        C5TO3   "BITD "         ; $CB
        C5TO3   "EORD "         ; $CC
        C5TO3   "ADCD "         ; $CD
        C5TO3   "ORD  "         ; $CE
        C5TO3   "BITMD"         ; $CF
        C5TO3   "COMF "         ; $D0
        C5TO3   "TSTF "         ; $D1
        C5TO3   "CLRF "         ; $D2
        C5TO3   "SUBE "         ; $D3
        C5TO3   "ADDE "         ; $D4
        C5TO3   "DIVD "         ; $D5
        C5TO3   "MULD "         ; $D6
        C5TO3   "ADDF "         ; $D7

; Lengths of instructions given an addressing mode. Matches values of
; AM_* Indexed addessing instructions length can increase due to post
; byte.
LENGTHS
        FCB     1               ; 0 AM_INVALID
        FCB     1               ; 1 AM_INHERENT
        FCB     2               ; 2 AM_IMM_BYTE
        FCB     3               ; 3 AM_IMM_WORD
        FCB     5               ; 4 AM_IMM_LONG
        FCB     2               ; 5 AM_DIRECT
        FCB     3               ; 6 AM_EXTENDED
        FCB     2               ; 7 AM_REL_BYTE
        FCB     3               ; 8 AM_REL_WORD
        FCB     2               ; 9 AM_INDEXED
        FCB     2               ; A AM_REGREG
        FCB     2               ; B AM_PUSHPULL
        FCB     3               ; C AM_IMM_DIR
        FCB     4               ; D AM_IMM_EXT
        FCB     3               ; E AM_IMM_IND
        FCB     3               ; E AM_BIT_BIT

; Lookup table to return needed remaining spaces to print to pad out
; instruction to correct column in disassembly.
; # bytes:  1  2  3  4  5
; Padding: 13,10, 7, 4, 1

PADDING
        FCB     13,10,7,4,1

; Lookup table to return number of additional bytes for indexed
; addressing based on low order 4 bits of postbyte.

Mon_PBES
        FCB     0,0,0,0,0,0,0,0
        FCB     1,2,0,0,1,2,0,0

; Pattern:  # Extra bytes:
; --------  --------------
; 0XXXXXXX   0

; 1XX00000   0
; 1XX00001   0
; 1XX00010   0
; 1XX00011   0
; 1XX00100   0
; 1X000101   0
; 1XX00110   0
; 1XX00111   0 (INVALID)

; 1XX01000   1   nn,R
; 1XX01001   2 nnnn,R
; 1XX01010   0 (INVALID)
; 1XX01011   0
; 1XX01100   1   nn,PC
; 1XX01101   2 nnnn,PC
; 1XX01110   0 (INVALID)
; 1XX01111   0

; Opcodes. Listed in order indexed by op code. Defines the mnemonic.
Mon_OCS
        FCB     OP_NEG          ; 00
        FCB     OP_OIM          ; 01
        FCB     OP_AIM          ; 02
        FCB     OP_COMB         ; 03
        FCB     OP_LSR          ; 04
        FCB     OP_EIM          ; 05
        FCB     OP_ROR          ; 06
        FCB     OP_ASR          ; 07
        FCB     OP_ASL          ; 08
        FCB     OP_ROL          ; 09
        FCB     OP_DEC          ; 0A
        FCB     OP_TIM          ; 0B
        FCB     OP_INC          ; 0C
        FCB     OP_TST          ; 0D
        FCB     OP_JMP          ; 0E
        FCB     OP_CLR          ; 0F

        FCB     OP_INV          ; 10 Page 2 extended opcodes
        FCB     OP_INV          ; 11 Page 3 extended opcodes
        FCB     OP_NOP          ; 12
        FCB     OP_SYNC         ; 13
        FCB     OP_SEXW         ; 14
        FCB     OP_INV          ; 15
        FCB     OP_LBRA         ; 16
        FCB     OP_LBSR         ; 17
        FCB     OP_INV          ; 18
        FCB     OP_DAA          ; 19
        FCB     OP_ORCC         ; 1A
        FCB     OP_INV          ; 1B
        FCB     OP_ANDCC        ; 1C
        FCB     OP_SEX          ; 1D
        FCB     OP_EXG          ; 1E
        FCB     OP_TFR          ; 1F

        FCB     OP_BRA          ; 20
        FCB     OP_BRN          ; 21
        FCB     OP_BHI          ; 22
        FCB     OP_BLS          ; 23
        FCB     OP_BCC          ; 24
        FCB     OP_BCS          ; 25
        FCB     OP_BNE          ; 26
        FCB     OP_BEQ          ; 27
        FCB     OP_BVC          ; 28
        FCB     OP_BVS          ; 29
        FCB     OP_BPL          ; 2A
        FCB     OP_BMI          ; 2B
        FCB     OP_BGE          ; 2C
        FCB     OP_BLT          ; 2D
        FCB     OP_BGT          ; 2E
        FCB     OP_BLE          ; 2F

        FCB     OP_LEAX         ; 30
        FCB     OP_LEAY         ; 31
        FCB     OP_LEAS         ; 32
        FCB     OP_LEAU         ; 33
        FCB     OP_PSHS         ; 34
        FCB     OP_PULS         ; 35
        FCB     OP_PSHU         ; 36
        FCB     OP_PULU         ; 37
        FCB     OP_INV          ; 38
        FCB     OP_RTS          ; 39
        FCB     OP_ABX          ; 3A
        FCB     OP_RTI          ; 3B
        FCB     OP_CWAI         ; 3C
        FCB     OP_MUL          ; 3D
        FCB     OP_INV          ; 3E
        FCB     OP_SWI          ; 3F

        FCB     OP_NEGA         ; 40
        FCB     OP_INV          ; 41
        FCB     OP_INV          ; 42
        FCB     OP_COMA         ; 43
        FCB     OP_LSRA         ; 44
        FCB     OP_INV          ; 45
        FCB     OP_RORA         ; 46
        FCB     OP_ASRA         ; 47
        FCB     OP_ASLA         ; 48
        FCB     OP_ROLA         ; 49
        FCB     OP_DECA         ; 4A
        FCB     OP_INV          ; 4B
        FCB     OP_INCA         ; 4C
        FCB     OP_TSTA         ; 4D
        FCB     OP_INV          ; 4E
        FCB     OP_CLRA         ; 4F

        FCB     OP_NEGB         ; 50
        FCB     OP_INV          ; 51
        FCB     OP_INV          ; 52
        FCB     OP_COMB         ; 53
        FCB     OP_LSRB         ; 54
        FCB     OP_INV          ; 55
        FCB     OP_RORB         ; 56
        FCB     OP_ASRB         ; 57
        FCB     OP_ASLB         ; 58
        FCB     OP_ROLB         ; 59
        FCB     OP_DECB         ; 5A
        FCB     OP_INV          ; 5B
        FCB     OP_INCB         ; 5C
        FCB     OP_TSTB         ; 5D
        FCB     OP_INV          ; 5E
        FCB     OP_CLRB         ; 5F

        FCB     OP_NEG          ; 60
        FCB     OP_OIM          ; 61
        FCB     OP_AIM          ; 62
        FCB     OP_COM          ; 63
        FCB     OP_LSR          ; 64
        FCB     OP_EIM          ; 65
        FCB     OP_ROR          ; 66
        FCB     OP_ASR          ; 67
        FCB     OP_ASL          ; 68
        FCB     OP_ROL          ; 69
        FCB     OP_DEC          ; 6A
        FCB     OP_TIM          ; 6B
        FCB     OP_INC          ; 6C
        FCB     OP_TST          ; 6D
        FCB     OP_JMP          ; 6E
        FCB     OP_CLR          ; 6F

        FCB     OP_NEG          ; 70
        FCB     OP_OIM          ; 71
        FCB     OP_AIM          ; 72
        FCB     OP_COM          ; 73
        FCB     OP_LSR          ; 74
        FCB     OP_EIM          ; 75
        FCB     OP_ROR          ; 76
        FCB     OP_ASR          ; 77
        FCB     OP_ASL          ; 78
        FCB     OP_ROL          ; 79
        FCB     OP_DEC          ; 7A
        FCB     OP_TIM          ; 7B
        FCB     OP_INC          ; 7C
        FCB     OP_TST          ; 7D
        FCB     OP_JMP          ; 7E
        FCB     OP_CLR          ; 7F

        FCB     OP_SUBA         ; 80
        FCB     OP_CMPA         ; 81
        FCB     OP_SBCA         ; 82
        FCB     OP_SUBD         ; 83
        FCB     OP_ANDA         ; 84
        FCB     OP_BITA         ; 85
        FCB     OP_LDA          ; 86
        FCB     OP_INV          ; 87
        FCB     OP_EORA         ; 88
        FCB     OP_ADCA         ; 89
        FCB     OP_ORA          ; 8A
        FCB     OP_ADDA         ; 8B
        FCB     OP_CMPX         ; 8C
        FCB     OP_BSR          ; 8D
        FCB     OP_LDX          ; 8E
        FCB     OP_INV          ; 8F

        FCB     OP_SUBA         ; 90
        FCB     OP_CMPA         ; 91
        FCB     OP_SBCA         ; 92
        FCB     OP_SUBD         ; 93
        FCB     OP_ANDA         ; 94
        FCB     OP_BITA         ; 95
        FCB     OP_LDA          ; 96
        FCB     OP_STA          ; 97
        FCB     OP_EORA         ; 98
        FCB     OP_ADCA         ; 99
        FCB     OP_ORA          ; 9A
        FCB     OP_ADDA         ; 9B
        FCB     OP_CMPX         ; 9C
        FCB     OP_JSR          ; 9D
        FCB     OP_LDX          ; 9E
        FCB     OP_STX          ; 9F

        FCB     OP_SUBA         ; A0
        FCB     OP_CMPA         ; A1
        FCB     OP_SBCA         ; A2
        FCB     OP_SUBD         ; A3
        FCB     OP_ANDA         ; A4
        FCB     OP_BITA         ; A5
        FCB     OP_LDA          ; A6
        FCB     OP_STA          ; A7
        FCB     OP_EORA         ; A8
        FCB     OP_ADCA         ; A9
        FCB     OP_ORA          ; AA
        FCB     OP_ADDA         ; AB
        FCB     OP_CMPX         ; AC
        FCB     OP_JSR          ; AD
        FCB     OP_LDX          ; AE
        FCB     OP_STX          ; AF

        FCB     OP_SUBA         ; B0
        FCB     OP_CMPA         ; B1
        FCB     OP_SBCA         ; B2
        FCB     OP_SUBD         ; B3
        FCB     OP_ANDA         ; B4
        FCB     OP_BITA         ; B5
        FCB     OP_LDA          ; B6
        FCB     OP_STA          ; B7
        FCB     OP_EORA         ; B8
        FCB     OP_ADCA         ; B9
        FCB     OP_ORA          ; BA
        FCB     OP_ADDA         ; BB
        FCB     OP_CMPX         ; BC
        FCB     OP_JSR          ; BD
        FCB     OP_LDX          ; BE
        FCB     OP_STX          ; BF

        FCB     OP_SUBB         ; C0
        FCB     OP_CMPB         ; C1
        FCB     OP_SBCB         ; C2
        FCB     OP_ADDD         ; C3
        FCB     OP_ANDB         ; C4
        FCB     OP_BITB         ; C5
        FCB     OP_LDB          ; C6
        FCB     OP_INV          ; C7
        FCB     OP_EORB         ; C8
        FCB     OP_ADCB         ; C9
        FCB     OP_ORB          ; CA
        FCB     OP_ADDB         ; CB
        FCB     OP_LDD          ; CC
        FCB     OP_LDQ          ; CD
        FCB     OP_LDU          ; CE
        FCB     OP_INV          ; CF

        FCB     OP_SUBB         ; D0
        FCB     OP_CMPB         ; D1
        FCB     OP_SBCB         ; D2
        FCB     OP_ADDD         ; D3
        FCB     OP_ANDB         ; D4
        FCB     OP_BITB         ; D5
        FCB     OP_LDB          ; D6
        FCB     OP_STB          ; D7
        FCB     OP_EORB         ; D8
        FCB     OP_ADCB         ; D9
        FCB     OP_ORB          ; DA
        FCB     OP_ADDB         ; DB
        FCB     OP_LDD          ; DC
        FCB     OP_STD          ; DD
        FCB     OP_LDU          ; DE
        FCB     OP_STU          ; DF

        FCB     OP_SUBB         ; E0
        FCB     OP_CMPB         ; E1
        FCB     OP_SBCB         ; E2
        FCB     OP_ADDD         ; E3
        FCB     OP_ANDB         ; E4
        FCB     OP_BITB         ; E5
        FCB     OP_LDB          ; E6
        FCB     OP_STB          ; E7
        FCB     OP_EORB         ; E8
        FCB     OP_ADCB         ; E9
        FCB     OP_ORB          ; EA
        FCB     OP_ADDB         ; EB
        FCB     OP_LDD          ; EC
        FCB     OP_STD          ; ED
        FCB     OP_LDU          ; EE
        FCB     OP_STU          ; EF

        FCB     OP_SUBB         ; F0
        FCB     OP_CMPB         ; F1
        FCB     OP_SBCB         ; F2
        FCB     OP_ADDD         ; F3
        FCB     OP_ANDB         ; F4
        FCB     OP_BITB         ; F5
        FCB     OP_LDB          ; F6
        FCB     OP_STB          ; F7
        FCB     OP_EORB         ; F8
        FCB     OP_ADCB         ; F9
        FCB     OP_ORB          ; FA
        FCB     OP_ADDB         ; FB
        FCB     OP_LDD          ; FC
        FCB     OP_STD          ; FD
        FCB     OP_LDU          ; FE
        FCB     OP_STU          ; FF

; Table of addressing modes. Listed in order,indexed by op code.
MODES
        FCB     AM_DIRECT       ; 00
        FCB     AM_IMM_DIR      ; 01  OIM
        FCB     AM_IMM_DIR      ; 02  AIM
        FCB     AM_DIRECT       ; 03
        FCB     AM_DIRECT       ; 04
        FCB     AM_IMM_DIR      ; 05  EIM
        FCB     AM_DIRECT       ; 06
        FCB     AM_DIRECT       ; 07
        FCB     AM_DIRECT       ; 08
        FCB     AM_DIRECT       ; 09
        FCB     AM_DIRECT       ; 0A
        FCB     AM_IMM_DIR      ; 0B  TIM
        FCB     AM_DIRECT       ; 0C
        FCB     AM_DIRECT       ; 0D
        FCB     AM_DIRECT       ; 0E
        FCB     AM_DIRECT       ; 0F

        FCB     AM_INVALID      ; 10 Page 2 extended opcodes
        FCB     AM_INVALID      ; 11 Page 3 extended opcodes
        FCB     AM_INHERENT     ; 12
        FCB     AM_INHERENT     ; 13
        FCB     AM_INVALID      ; 14
        FCB     AM_INVALID      ; 15
        FCB     AM_REL_WORD     ; 16
        FCB     AM_REL_WORD     ; 17
        FCB     AM_INVALID      ; 18
        FCB     AM_INHERENT     ; 19
        FCB     AM_IMM_BYTE     ; 1A
        FCB     AM_INVALID      ; 1B
        FCB     AM_IMM_BYTE     ; 1C
        FCB     AM_INHERENT     ; 1D
        FCB     AM_REGREG       ; 1E  EXG
        FCB     AM_REGREG       ; 1F  TFR

        FCB     AM_REL_BYTE    ; 20
        FCB     AM_REL_BYTE    ; 21
        FCB     AM_REL_BYTE    ; 22
        FCB     AM_REL_BYTE    ; 23
        FCB     AM_REL_BYTE    ; 24
        FCB     AM_REL_BYTE    ; 25
        FCB     AM_REL_BYTE    ; 26
        FCB     AM_REL_BYTE    ; 27
        FCB     AM_REL_BYTE    ; 28
        FCB     AM_REL_BYTE    ; 29
        FCB     AM_REL_BYTE    ; 2A
        FCB     AM_REL_BYTE    ; 2B
        FCB     AM_REL_BYTE    ; 2C
        FCB     AM_REL_BYTE    ; 2D
        FCB     AM_REL_BYTE    ; 2E
        FCB     AM_REL_BYTE    ; 2F

        FCB     AM_INDEXED      ; 30
        FCB     AM_INDEXED      ; 31
        FCB     AM_INDEXED      ; 32
        FCB     AM_INDEXED      ; 33
        FCB     AM_PUSHPULL     ; 34
        FCB     AM_PUSHPULL     ; 35
        FCB     AM_PUSHPULL     ; 36
        FCB     AM_PUSHPULL     ; 37
        FCB     AM_INVALID      ; 38
        FCB     AM_INHERENT     ; 39
        FCB     AM_INHERENT     ; 3A
        FCB     AM_INHERENT     ; 3B
        FCB     AM_IMM_BYTE     ; 3C
        FCB     AM_INHERENT     ; 3D
        FCB     AM_INVALID      ; 3E
        FCB     AM_INHERENT     ; 3F

        FCB     AM_INHERENT     ; 40
        FCB     AM_INVALID      ; 41
        FCB     AM_INVALID      ; 42
        FCB     AM_INHERENT     ; 43
        FCB     AM_INHERENT     ; 44
        FCB     AM_INVALID      ; 45
        FCB     AM_INHERENT     ; 46
        FCB     AM_INHERENT     ; 47
        FCB     AM_INHERENT     ; 48
        FCB     AM_INHERENT     ; 49
        FCB     AM_INHERENT     ; 4A
        FCB     AM_INVALID      ; 4B
        FCB     AM_INHERENT     ; 4C
        FCB     AM_INHERENT     ; 4D
        FCB     AM_INVALID      ; 4E
        FCB     AM_INHERENT     ; 4F

        FCB     AM_INHERENT     ; 50
        FCB     AM_INVALID      ; 51
        FCB     AM_INVALID      ; 52
        FCB     AM_INHERENT     ; 53
        FCB     AM_INHERENT     ; 54
        FCB     AM_INVALID      ; 55
        FCB     AM_INHERENT     ; 56
        FCB     AM_INHERENT     ; 57
        FCB     AM_INHERENT     ; 58
        FCB     AM_INHERENT     ; 59
        FCB     AM_INHERENT     ; 5A
        FCB     AM_INVALID      ; 5B
        FCB     AM_INHERENT     ; 5C
        FCB     AM_INHERENT     ; 5D
        FCB     AM_INVALID      ; 5E
        FCB     AM_INHERENT     ; 5F

        FCB     AM_INDEXED      ; 60
        FCB     AM_IMM_IND      ; 61  OIM
        FCB     AM_IMM_IND      ; 62  AIM
        FCB     AM_INDEXED      ; 63
        FCB     AM_INDEXED      ; 64
        FCB     AM_IMM_IND      ; 65  EIM
        FCB     AM_INDEXED      ; 66
        FCB     AM_INDEXED      ; 67
        FCB     AM_INDEXED      ; 68
        FCB     AM_INDEXED      ; 69
        FCB     AM_INDEXED      ; 6A
        FCB     AM_IMM_IND      ; 6B  TIM
        FCB     AM_INDEXED      ; 6C
        FCB     AM_INDEXED      ; 6D
        FCB     AM_INDEXED      ; 6E
        FCB     AM_INDEXED      ; 6F

        FCB     AM_EXTENDED     ; 70
        FCB     AM_IMM_EXT      ; 71  OIM
        FCB     AM_IMM_EXT      ; 72  AIM
        FCB     AM_EXTENDED     ; 73
        FCB     AM_EXTENDED     ; 74
        FCB     AM_IMM_EXT      ; 75  EIM
        FCB     AM_EXTENDED     ; 76
        FCB     AM_EXTENDED     ; 77
        FCB     AM_EXTENDED     ; 78
        FCB     AM_EXTENDED     ; 79
        FCB     AM_EXTENDED     ; 7A
        FCB     AM_IMM_EXT      ; 7B  TIM
        FCB     AM_EXTENDED     ; 7C
        FCB     AM_EXTENDED     ; 7D
        FCB     AM_EXTENDED     ; 7E
        FCB     AM_EXTENDED     ; 7F

        FCB     AM_IMM_BYTE     ; 80
        FCB     AM_IMM_BYTE     ; 81
        FCB     AM_IMM_BYTE     ; 82
        FCB     AM_IMM_WORD     ; 83
        FCB     AM_IMM_BYTE     ; 84
        FCB     AM_IMM_BYTE     ; 85
        FCB     AM_IMM_BYTE     ; 86
        FCB     AM_INVALID      ; 87
        FCB     AM_IMM_BYTE     ; 88
        FCB     AM_IMM_BYTE     ; 89
        FCB     AM_IMM_BYTE     ; 8A
        FCB     AM_IMM_BYTE     ; 8B
        FCB     AM_IMM_WORD     ; 8C
        FCB     AM_REL_BYTE     ; 8D
        FCB     AM_IMM_WORD     ; 8E
        FCB     AM_INVALID      ; 8F

        FCB     AM_DIRECT       ; 90
        FCB     AM_DIRECT       ; 91
        FCB     AM_DIRECT       ; 92
        FCB     AM_DIRECT       ; 93
        FCB     AM_DIRECT       ; 94
        FCB     AM_DIRECT       ; 95
        FCB     AM_DIRECT       ; 96
        FCB     AM_DIRECT       ; 97
        FCB     AM_DIRECT       ; 98
        FCB     AM_DIRECT       ; 99
        FCB     AM_DIRECT       ; 9A
        FCB     AM_DIRECT       ; 9B
        FCB     AM_DIRECT       ; 9C
        FCB     AM_DIRECT       ; 9D
        FCB     AM_DIRECT       ; 9E
        FCB     AM_DIRECT       ; 9F

        FCB     AM_INDEXED      ; A0
        FCB     AM_INDEXED      ; A1
        FCB     AM_INDEXED      ; A2
        FCB     AM_INDEXED      ; A3
        FCB     AM_INDEXED      ; A4
        FCB     AM_INDEXED      ; A5
        FCB     AM_INDEXED      ; A6
        FCB     AM_INDEXED      ; A7
        FCB     AM_INDEXED      ; A8
        FCB     AM_INDEXED      ; A9
        FCB     AM_INDEXED      ; AA
        FCB     AM_INDEXED      ; AB
        FCB     AM_INDEXED      ; AC
        FCB     AM_INDEXED      ; AD
        FCB     AM_INDEXED      ; AE
        FCB     AM_INDEXED      ; AF

        FCB     AM_EXTENDED     ; B0
        FCB     AM_EXTENDED     ; B1
        FCB     AM_EXTENDED     ; B2
        FCB     AM_EXTENDED     ; B3
        FCB     AM_EXTENDED     ; B4
        FCB     AM_EXTENDED     ; B5
        FCB     AM_EXTENDED     ; B6
        FCB     AM_EXTENDED     ; B7
        FCB     AM_EXTENDED     ; B8
        FCB     AM_EXTENDED     ; B9
        FCB     AM_EXTENDED     ; BA
        FCB     AM_EXTENDED     ; BB
        FCB     AM_EXTENDED     ; BC
        FCB     AM_EXTENDED     ; BD
        FCB     AM_EXTENDED     ; BE
        FCB     AM_EXTENDED     ; BF

        FCB     AM_IMM_BYTE     ; C0
        FCB     AM_IMM_BYTE     ; C1
        FCB     AM_IMM_BYTE     ; C2
        FCB     AM_IMM_WORD     ; C3
        FCB     AM_IMM_BYTE     ; C4
        FCB     AM_IMM_BYTE     ; C5
        FCB     AM_IMM_BYTE     ; C6
        FCB     AM_INVALID      ; C7
        FCB     AM_IMM_BYTE     ; C8
        FCB     AM_IMM_BYTE     ; C9
        FCB     AM_IMM_BYTE     ; CA
        FCB     AM_IMM_BYTE     ; CB
        FCB     AM_IMM_WORD     ; CC
        FCB     AM_IMM_LONG     ; CD
        FCB     AM_IMM_WORD     ; CE
        FCB     AM_INVALID      ; CF

        FCB     AM_DIRECT       ; D0
        FCB     AM_DIRECT       ; D1
        FCB     AM_DIRECT       ; D2
        FCB     AM_DIRECT       ; D3
        FCB     AM_DIRECT       ; D4
        FCB     AM_DIRECT       ; D5
        FCB     AM_DIRECT       ; D6
        FCB     AM_DIRECT       ; D7
        FCB     AM_DIRECT       ; D8
        FCB     AM_DIRECT       ; D9
        FCB     AM_DIRECT       ; DA
        FCB     AM_DIRECT       ; DB
        FCB     AM_DIRECT       ; DC
        FCB     AM_DIRECT       ; DD
        FCB     AM_DIRECT       ; DE
        FCB     AM_DIRECT       ; DF

        FCB     AM_INDEXED      ; E0
        FCB     AM_INDEXED      ; E1
        FCB     AM_INDEXED      ; E2
        FCB     AM_INDEXED      ; E3
        FCB     AM_INDEXED      ; E4
        FCB     AM_INDEXED      ; E5
        FCB     AM_INDEXED      ; E6
        FCB     AM_INDEXED      ; E7
        FCB     AM_INDEXED      ; E8
        FCB     AM_INDEXED      ; E9
        FCB     AM_INDEXED      ; EA
        FCB     AM_INDEXED      ; EB
        FCB     AM_INDEXED      ; EC
        FCB     AM_INDEXED      ; ED
        FCB     AM_INDEXED      ; EE
        FCB     AM_INDEXED      ; EF

        FCB     AM_EXTENDED     ; F0
        FCB     AM_EXTENDED     ; F1
        FCB     AM_EXTENDED     ; F2
        FCB     AM_EXTENDED     ; F3
        FCB     AM_EXTENDED     ; F4
        FCB     AM_EXTENDED     ; F5
        FCB     AM_EXTENDED     ; F6
        FCB     AM_EXTENDED     ; F7
        FCB     AM_EXTENDED     ; F8
        FCB     AM_EXTENDED     ; F9
        FCB     AM_EXTENDED     ; FA
        FCB     AM_EXTENDED     ; FB
        FCB     AM_EXTENDED     ; FC
        FCB     AM_EXTENDED     ; FD
        FCB     AM_EXTENDED     ; FE
        FCB     AM_EXTENDED     ; FF

; Special table for page 2 instructions prefixed by $10.
; Format: opcode (less 10), instruction, addressing mode

PAGE2
        FCB     $21,OP_LBRN ,AM_REL_WORD
        FCB     $22,OP_LBHI ,AM_REL_WORD
        FCB     $23,OP_LBLS ,AM_REL_WORD
        FCB     $24,OP_LBCC ,AM_REL_WORD
        FCB     $25,OP_LBCS ,AM_REL_WORD
        FCB     $26,OP_LBNE ,AM_REL_WORD
        FCB     $27,OP_LBEQ ,AM_REL_WORD
        FCB     $28,OP_LBVC ,AM_REL_WORD
        FCB     $29,OP_LBVS ,AM_REL_WORD
        FCB     $2A,OP_LBPL ,AM_REL_WORD
        FCB     $2B,OP_LBMI ,AM_REL_WORD
        FCB     $2C,OP_LBGE ,AM_REL_WORD
        FCB     $2D,OP_LBLT ,AM_REL_WORD
        FCB     $2E,OP_LBGT ,AM_REL_WORD
        FCB     $2F,OP_LBLE ,AM_REL_WORD

        FCB     $30,OP_ADDR ,AM_REGREG
        FCB     $31,OP_ADCR ,AM_REGREG
        FCB     $32,OP_SUBR ,AM_REGREG
        FCB     $33,OP_SBCR ,AM_REGREG
        FCB     $34,OP_ANDR ,AM_REGREG
        FCB     $35,OP_ORR  ,AM_REGREG
        FCB     $36,OP_EORR ,AM_REGREG
        FCB     $37,OP_CMPR ,AM_REGREG
        FCB     $38,OP_PSHSW,AM_INHERENT
        FCB     $39,OP_PULSW,AM_INHERENT
        FCB     $3A,OP_PSHUW,AM_INHERENT
        FCB     $3B,OP_PULUW,AM_INHERENT
        FCB     $3F,OP_SWI2 ,AM_INHERENT

        FCB     $40,OP_NEGD ,AM_INHERENT
        FCB     $43,OP_COMD ,AM_INHERENT
        FCB     $44,OP_LSRD ,AM_INHERENT
        FCB     $46,OP_RORD ,AM_INHERENT
        FCB     $47,OP_ASRD ,AM_INHERENT
        FCB     $48,OP_LSLD ,AM_INHERENT
        FCB     $49,OP_ROLD ,AM_INHERENT
        FCB     $4A,OP_DECD ,AM_INHERENT
        FCB     $4C,OP_INCD ,AM_INHERENT
        FCB     $4D,OP_TSTD ,AM_INHERENT
        FCB     $4F,OP_CLRD ,AM_INHERENT

        FCB     $53,OP_COMW ,AM_INHERENT
        FCB     $54,OP_LSRW ,AM_INHERENT
        FCB     $56,OP_RORW ,AM_INHERENT
        FCB     $59,OP_ROLW ,AM_INHERENT
        FCB     $5A,OP_DECW ,AM_INHERENT
        FCB     $5C,OP_INCW ,AM_INHERENT
        FCB     $5C,OP_TSTW ,AM_INHERENT
        FCB     $5F,OP_CLRW ,AM_INHERENT

        FCB     $80,OP_SUBW ,AM_IMM_WORD
        FCB     $81,OP_CMPW ,AM_IMM_WORD
        FCB     $82,OP_SBCD ,AM_IMM_WORD
        FCB     $83,OP_CMPD ,AM_IMM_WORD
        FCB     $84,OP_ANDD ,AM_IMM_WORD
        FCB     $85,OP_BITD ,AM_IMM_WORD
        FCB     $86,OP_LDW  ,AM_IMM_WORD
        FCB     $88,OP_EORD ,AM_IMM_WORD
        FCB     $89,OP_ADCD ,AM_IMM_WORD
        FCB     $8A,OP_ORD  ,AM_IMM_WORD
        FCB     $8B,OP_ADDW ,AM_IMM_WORD
        FCB     $8C,OP_CMPY ,AM_IMM_WORD
        FCB     $8E,OP_LDY  ,AM_IMM_WORD

        FCB     $90,OP_SUBW ,AM_DIRECT
        FCB     $91,OP_CMPW ,AM_DIRECT
        FCB     $92,OP_SBCD ,AM_DIRECT
        FCB     $93,OP_CMPD ,AM_DIRECT
        FCB     $94,OP_ANDD ,AM_DIRECT
        FCB     $95,OP_BITD ,AM_DIRECT
        FCB     $96,OP_LDW  ,AM_DIRECT
        FCB     $97,OP_STW  ,AM_DIRECT
        FCB     $98,OP_EORD ,AM_DIRECT
        FCB     $99,OP_ADCD ,AM_DIRECT
        FCB     $9A,OP_ORD  ,AM_DIRECT
        FCB     $9B,OP_ADDW ,AM_DIRECT
        FCB     $9C,OP_CMPY ,AM_DIRECT
        FCB     $9E,OP_LDY  ,AM_DIRECT
        FCB     $9D,OP_STY  ,AM_DIRECT

        FCB     $A0,OP_SUBW ,AM_INDEXED
        FCB     $A1,OP_CMPW ,AM_INDEXED
        FCB     $A2,OP_SBCD ,AM_INDEXED
        FCB     $A3,OP_CMPD ,AM_INDEXED
        FCB     $A4,OP_ANDD ,AM_INDEXED
        FCB     $A5,OP_BITD ,AM_INDEXED
        FCB     $A6,OP_LDW  ,AM_INDEXED
        FCB     $A7,OP_STW  ,AM_INDEXED
        FCB     $A8,OP_EORD ,AM_INDEXED
        FCB     $A9,OP_ADCD ,AM_INDEXED
        FCB     $AA,OP_ORD  ,AM_INDEXED
        FCB     $AB,OP_ADDW ,AM_INDEXED
        FCB     $AC,OP_CMPY ,AM_INDEXED
        FCB     $AE,OP_LDY  ,AM_INDEXED
        FCB     $AD,OP_STY  ,AM_INDEXED

        FCB     $B0,OP_SUBW ,AM_EXTENDED
        FCB     $B1,OP_CMPW ,AM_EXTENDED
        FCB     $B2,OP_SBCD ,AM_EXTENDED
        FCB     $B3,OP_CMPD ,AM_EXTENDED
        FCB     $B4,OP_ANDD ,AM_EXTENDED
        FCB     $B5,OP_BITD ,AM_EXTENDED
        FCB     $B6,OP_LDW  ,AM_EXTENDED
        FCB     $B7,OP_STW  ,AM_EXTENDED
        FCB     $B8,OP_EORD ,AM_EXTENDED
        FCB     $B9,OP_ADCD ,AM_EXTENDED
        FCB     $BA,OP_ORD  ,AM_EXTENDED
        FCB     $BB,OP_ADDW ,AM_EXTENDED
        FCB     $BC,OP_CMPY ,AM_EXTENDED
        FCB     $BE,OP_LDY  ,AM_EXTENDED
        FCB     $BD,OP_STY  ,AM_EXTENDED

        FCB     $CE,OP_LDS  ,AM_IMM_WORD

        FCB     $DC,OP_LDQ  ,AM_DIRECT
        FCB     $DD,OP_STQ  ,AM_DIRECT
        FCB     $DE,OP_LDS  ,AM_DIRECT
        FCB     $DF,OP_STS  ,AM_DIRECT

        FCB     $EC,OP_LDQ  ,AM_INDEXED
        FCB     $ED,OP_STQ  ,AM_INDEXED
        FCB     $EE,OP_LDS  ,AM_INDEXED
        FCB     $EF,OP_STS  ,AM_INDEXED

        FCB     $FC,OP_LDQ  ,AM_EXTENDED
        FCB     $FD,OP_STQ  ,AM_EXTENDED
        FCB     $FE,OP_LDS  ,AM_EXTENDED
        FCB     $FF,OP_STS  ,AM_EXTENDED
        FCB     0         ; end of table

* Special table for page 3 instructions prefixed by $11.

* ------------------------------ *
* opcode = 0001 0001 : 7654 3210 *
*                             AA *
* ------------------------------ *

* address mode
* ---------------------------
* 0.....11 = Diverse    3x
* 0....10. = Inherent   4x,5x
* 1.....00 = Immediate  8x,Cx
* 1.....01 = Direct     9x,Dx
* 1.....10 = Indexed    Ax,Ex
* 1.....11 = Extended   Bx,Fx

* register
* ---------------------------
* ........ = Inherent  E   4x
* ........ = Inherent  F   5x
* 1100.... = Immediate F   Cx
* 1101.... = Direct    F   Dx
* 1110.... = Indexed   F   Ex
* 1111.... = Extended  F   Fx

* operation
* ---------------------------
* ....0000 = 0 = SUB
* ....0001 = 1 = CMP
* ....0011 = 3 = COM
* ....0110 = 6 = LD
* ....0111 = 7 = ST
* ....1010 = A = DEC
* ....1011 = B = ADD
* ....1100 = C = INC
* ....1101 = D = TST
* ....1110 = E = DIVQ
* ....1111 = F = MULD

PAGE3
        FCB     $30,OP_BAND ,AM_BIT_BIT
        FCB     $31,OP_BIAND,AM_BIT_BIT
        FCB     $32,OP_BOR  ,AM_BIT_BIT
        FCB     $33,OP_BIOR ,AM_BIT_BIT
        FCB     $34,OP_BEOR ,AM_BIT_BIT
        FCB     $35,OP_BIEOR,AM_BIT_BIT
        FCB     $36,OP_LDBT ,AM_BIT_BIT
        FCB     $37,OP_STBT ,AM_BIT_BIT
        FCB     $38,OP_TFM  ,AM_REGREG
        FCB     $39,OP_TFM  ,AM_REGREG
        FCB     $3A,OP_TFM  ,AM_REGREG
        FCB     $3B,OP_TFM  ,AM_REGREG
        FCB     $3C,OP_BITMD,AM_IMM_BYTE
        FCB     $3D,OP_LDMD ,AM_IMM_BYTE
        FCB     $3F,OP_SWI3 ,AM_INHERENT

        FCB     $43,OP_COME ,AM_INHERENT
        FCB     $4A,OP_DECE ,AM_INHERENT
        FCB     $4C,OP_INCE ,AM_INHERENT
        FCB     $4D,OP_TSTE ,AM_INHERENT
        FCB     $4F,OP_CLRE ,AM_INHERENT

        FCB     $53,OP_COMF ,AM_INHERENT
        FCB     $5A,OP_DECF ,AM_INHERENT
        FCB     $5C,OP_INCF ,AM_INHERENT
        FCB     $5D,OP_TSTF ,AM_INHERENT
        FCB     $5F,OP_CLRF ,AM_INHERENT

        FCB     $80,OP_SUBE ,AM_IMM_BYTE
        FCB     $81,OP_CMPE ,AM_IMM_BYTE
        FCB     $83,OP_CMPU ,AM_IMM_WORD
        FCB     $86,OP_LDE  ,AM_IMM_BYTE
        FCB     $8B,OP_ADDE ,AM_IMM_BYTE
        FCB     $8C,OP_CMPS ,AM_IMM_WORD
        FCB     $8D,OP_DIVD ,AM_IMM_WORD
        FCB     $8E,OP_DIVQ ,AM_IMM_WORD
        FCB     $8F,OP_MULD ,AM_IMM_WORD

        FCB     $90,OP_SUBE ,AM_DIRECT
        FCB     $91,OP_CMPE ,AM_DIRECT
        FCB     $93,OP_CMPU ,AM_DIRECT
        FCB     $96,OP_LDE  ,AM_DIRECT
        FCB     $97,OP_STE  ,AM_DIRECT
        FCB     $9B,OP_ADDE ,AM_DIRECT
        FCB     $9C,OP_CMPS ,AM_DIRECT
        FCB     $9D,OP_DIVD ,AM_DIRECT
        FCB     $9E,OP_DIVQ ,AM_DIRECT
        FCB     $9F,OP_MULD ,AM_DIRECT

        FCB     $A0,OP_SUBE ,AM_INDEXED
        FCB     $A1,OP_CMPE ,AM_INDEXED
        FCB     $A3,OP_CMPU ,AM_INDEXED
        FCB     $A6,OP_LDE  ,AM_INDEXED
        FCB     $A7,OP_STE  ,AM_INDEXED
        FCB     $AB,OP_ADDE ,AM_INDEXED
        FCB     $AC,OP_CMPS ,AM_INDEXED
        FCB     $AD,OP_DIVD ,AM_INDEXED
        FCB     $AE,OP_DIVQ ,AM_INDEXED
        FCB     $AF,OP_MULD ,AM_INDEXED

        FCB     $B0,OP_SUBE ,AM_EXTENDED
        FCB     $B1,OP_CMPE ,AM_EXTENDED
        FCB     $B3,OP_CMPU ,AM_EXTENDED
        FCB     $B6,OP_LDE  ,AM_EXTENDED
        FCB     $B7,OP_STE  ,AM_EXTENDED
        FCB     $BB,OP_ADDE ,AM_EXTENDED
        FCB     $BC,OP_CMPS ,AM_EXTENDED
        FCB     $BD,OP_DIVD ,AM_EXTENDED
        FCB     $BE,OP_DIVQ ,AM_EXTENDED
        FCB     $BF,OP_MULD ,AM_EXTENDED

        FCB     $C0,OP_SUBF ,AM_IMM_BYTE
        FCB     $C1,OP_CMPF ,AM_IMM_BYTE
        FCB     $C6,OP_LDF  ,AM_IMM_BYTE
        FCB     $CB,OP_ADDF ,AM_IMM_BYTE

        FCB     $D0,OP_SUBF ,AM_DIRECT
        FCB     $D1,OP_CMPF ,AM_DIRECT
        FCB     $D6,OP_LDF  ,AM_DIRECT
        FCB     $D7,OP_STF  ,AM_DIRECT
        FCB     $DB,OP_ADDF ,AM_DIRECT

        FCB     $E0,OP_SUBF ,AM_INDEXED
        FCB     $E1,OP_CMPF ,AM_INDEXED
        FCB     $E6,OP_LDF  ,AM_INDEXED
        FCB     $E7,OP_STF  ,AM_INDEXED
        FCB     $EB,OP_ADDF ,AM_INDEXED

        FCB     $F0,OP_SUBF ,AM_EXTENDED
        FCB     $F1,OP_CMPF ,AM_EXTENDED
        FCB     $F6,OP_LDF  ,AM_EXTENDED
        FCB     $F7,OP_STF  ,AM_EXTENDED
        FCB     $FB,OP_ADDF ,AM_EXTENDED

        FCB     0                             ; indicates end of table

************
RegisterName
************

        BYTE    'D',0  ; 0
        BYTE    'X',0  ; 1
        BYTE    'Y',0  ; 2
        BYTE    'U',0  ; 3
        BYTE    'S',0  ; 4
        BYTE    "PC"   ; 5
        BYTE    'W',0  ; 6
        BYTE    'V',0  ; 7
        BYTE    'A',0  ; 8
        BYTE    'B',0  ; 9
        BYTE    "CC"   ; A
        BYTE    "DP"   ; B
        BYTE    '0',0  ; C
        BYTE    '0',0  ; D
        BYTE    'E',0  ; E
        BYTE    'F',0  ; F

************
PushPullName
************

        BYTE    "CC"   ; 0
        BYTE    'A',0  ; 1
        BYTE    'B',0  ; 2
        BYTE    "DP"   ; 3
        BYTE    'X',0  ; 4
        BYTE    'Y',0  ; 5
        BYTE    'U',0  ; 6
        BYTE    "PC"   ; 7

MSG1    BYTE    "; INVALID",0
MSGWPP  BYTE    ",W++",0
MSGMMW  BYTE    ",--W",0

; Table of TFM direction signs

TFMS    BYTE    "+-+",0
        BYTE    "+-",0,"+"

